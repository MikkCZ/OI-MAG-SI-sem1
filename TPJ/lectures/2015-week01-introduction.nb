(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    210352,       6149]
NotebookOptionsPosition[    156367,       4674]
NotebookOutlinePosition[    180678,       5271]
CellTagsIndexPosition[    180224,       5258]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 "Introduction to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Title",
 CellChangeTimes->{{3.562580207057431*^9, 3.562580207502028*^9}, {
   3.562580500477847*^9, 3.5625805110036173`*^9}, 3.584778545242773*^9, 
   3.5847786002034273`*^9, {3.5847789048072853`*^9, 3.5847789135104103`*^9}, {
   3.5853855890530167`*^9, 3.5853856117240458`*^9}}],

Cell["A4M36TPJ, WS 15/16, Week 1 & 2", "Subtitle",
 CellChangeTimes->{{3.562580515300078*^9, 3.562580519995632*^9}, {
  3.5847788979206457`*^9, 3.584778965749542*^9}, {3.585385597884557*^9, 
  3.585385599388666*^9}, {3.620286150158824*^9, 3.620286156305924*^9}, {
  3.653025800855159*^9, 3.653025802840242*^9}}],

Cell["Zden\[EHacek]k Buk, bukz1@fel.cvut.cz", "Subsubtitle",
 CellChangeTimes->{{3.562581140905176*^9, 3.5625811745094767`*^9}, {
   3.584778972611209*^9, 3.584779002416012*^9}, {3.584779115297949*^9, 
   3.584779126024968*^9}, {3.5847791743688717`*^9, 3.58477919178168*^9}, 
   3.584779568147327*^9, {3.587355242449349*^9, 3.587355243760145*^9}, 
   3.587355336269288*^9}],

Cell["\<\
Dept. of Computer Science and Engineering
Faculty of Electrical Engineering
Czech Technical University in Prague\
\>", "Subsubtitle",
 CellChangeTimes->{{3.562581140905176*^9, 3.5625811745094767`*^9}, {
   3.584778972611209*^9, 3.584779002416012*^9}, {3.584779115297949*^9, 
   3.584779126024968*^9}, {3.5847791743688717`*^9, 3.58477919178168*^9}, 
   3.584779568147327*^9, {3.587355242449349*^9, 3.587355243760145*^9}, 
   3.587355336269288*^9, {3.587357048308634*^9, 3.587357053921727*^9}}],

Cell["Last update: Oct 2015", "Subsubtitle",
 CellChangeTimes->{{3.562581140905176*^9, 3.5625811745094767`*^9}, {
   3.584778972611209*^9, 3.584779002416012*^9}, {3.584779115297949*^9, 
   3.584779126024968*^9}, {3.5847791743688717`*^9, 3.58477919178168*^9}, 
   3.584779568147327*^9, {3.587355242449349*^9, 3.587355243760145*^9}, 
   3.587355336269288*^9, {3.587357048308634*^9, 3.5873570695359507`*^9}, {
   3.620286164876161*^9, 3.6202861650655823`*^9}, {3.653025894257901*^9, 
   3.653025896946032*^9}}],

Cell[CellGroupData[{

Cell["Preliminaries & Overview", "Section",
 CellChangeTimes->{{3.585385582581087*^9, 3.5853855858611917`*^9}, {
  3.587358500779592*^9, 3.58735850215212*^9}, {3.587358837782984*^9, 
  3.587358841364088*^9}}],

Cell[TextData[{
 "The goal of this lesson is an introduction to Wolfram ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " which will be the main tool for solving task and experimenting with \
various topics in the ",
 StyleBox["Programming Language Theory ",
  FontSlant->"Italic"],
 "course (A4M36TPJ)."
}], "Text",
 CellChangeTimes->{{3.5854661606192627`*^9, 3.585466173041863*^9}, 
   3.585466262344067*^9, {3.587358879260229*^9, 3.587359004678443*^9}, {
   3.587359549691971*^9, 3.587359550363697*^9}}],

Cell[TextData[{
 "After this lesson you should be able to work with notebooks in ",
 StyleBox["Mathematica,",
  FontSlant->"Italic"],
 " write and read basic programs in functional, procedural & rule-based \
style. "
}], "Text",
 CellChangeTimes->{{3.587359541522348*^9, 3.587359616825301*^9}, {
  3.587359695510751*^9, 3.5873597123822823`*^9}}],

Cell["\<\
This knowledge is essential for future exercises and tasks in following weeks.\
\>", "Text",
 CellChangeTimes->{{3.587359721623261*^9, 3.5873597821158733`*^9}, 
   3.588850849042049*^9, 3.5890127860567713`*^9}],

Cell[CellGroupData[{

Cell["Installation", "Subsection",
 CellChangeTimes->{{3.587359038777226*^9, 3.5873590406221933`*^9}}],

Cell[TextData[{
 "CTU students have access to the unlimited license of Wolfram ",
 StyleBox["Mathematica,",
  FontSlant->"Italic"],
 " which can be installed on your own computers. This software is also \
available in computer lab KN-E:310."
}], "Text",
 CellChangeTimes->{{3.587359049448866*^9, 3.587359233560837*^9}, 
   3.620286177706131*^9}],

Cell[TextData[{
 "Download link: ",
 ButtonBox["http://download.cvut.cz",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://download.cvut.cz"], None},
  ButtonNote->"http://download.cvut.cz"]
}], "Text",
 CellChangeTimes->{{3.587359049448866*^9, 3.587359156858417*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Materials", "Subsection",
 CellChangeTimes->{{3.587359274033618*^9, 3.587359275620988*^9}}],

Cell["\<\
The course materials and other Information are available at the course \
website.\
\>", "Text",
 CellChangeTimes->{{3.587359279565036*^9, 3.587359327107223*^9}, {
   3.5873593571838827`*^9, 3.587359416649693*^9}, 3.589012796253251*^9}],

Cell[TextData[ButtonBox["https://edux.feld.cvut.cz/courses/A4M36TPJ/",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["https://edux.feld.cvut.cz/courses/A4M36TPJ/"], None},
 ButtonNote->"https://edux.feld.cvut.cz/courses/A4M36TPJ/"]], "Text",
 CellChangeTimes->{{3.587359279565036*^9, 3.587359327107223*^9}, {
  3.5873593571838827`*^9, 3.587359441959268*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Introduction", "Section",
 CellChangeTimes->{{3.587359882778241*^9, 3.587359885216445*^9}, {
  3.5873612515803537`*^9, 3.587361254386257*^9}}],

Cell[CellGroupData[{

Cell["Getting Started", "Subsection",
 CellChangeTimes->{{3.5873612022939177`*^9, 3.587361203867831*^9}, {
  3.587361271311215*^9, 3.58736127452148*^9}}],

Cell[TextData[{
 "When you first start ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " you should see an empty document called ",
 StyleBox["notebook.",
  FontSlant->"Italic"],
 " You can create such document using ",
 StyleBox["create new notebook ",
  FontSlant->"Italic"],
 "in startup palette or from a menu bar (File \[RightPointer] New \
\[RightPointer] Notebook)."
}], "Text",
 CellChangeTimes->{{3.5873603980873613`*^9, 3.5873604273980637`*^9}, {
  3.587360458414627*^9, 3.587360514235216*^9}, {3.587360545787826*^9, 
  3.587360554634029*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnXlwFfe15xVeUvVqaqry98xUTd6bzNQbx47HC1IysR3bWJKTeGyw88Zs
dmwItiEOZjEQY8DsiyR2sNi8BzA22heQQMuVrnYktIKEFoQWJIQkdgFJOZn5
3j7W8U9XV+JeQVpc8f3UTdevT59zfud3uvur1rXo/OvUWS+9OSogIODdf8bm
pSl/enru3CkLf/t97IxZOO+Nqf+EwU78r+p7AQGucXd3d3t7e11dXWlpaVFR
UWFhYYFFvkVeXl6uRY6Bs5fsXrIMHAOQSQghdz0DKZipcip9KoamQopmQjxF
RUVRIa0Q2LKystraWkguhLetra2ysrK8vPz06dOdnZ2XPXHp0iWPdm/QWBl4
n8qj5xULGQwUOMihQRhClFuFXmbQ+vv7D9Qc9t8j7L9H2H+PsXdD/yGwkNly
CwjvqVOnMGhtbT1ncdYAR2WAo20WZ/vSatFiIbtixy6cxa5GSWKmVbuEawZJ
K574AdF/Xjmkmd2qdTOadk3rcbpBkvSf11yLWx63wswMbvW0GSAKi/UYxf73
n5f9Z//9rv+go6MDgXj6hfAWFxdjKwU3NzdLwTKAT7NFSy9uYyCVS7XYNSs3
86ibGE2L2UDtoVuIObuG6+wmbgWrm+mpY61H65TZzQxubdFJZYGtBm6LFQed
pf96NZVb29l/9p/9H8H9hxrX1tZCeHNzc5uampp7EecmCx3A39zF4IxFk4Ec
lSTmrsSaFjMWAw0xPdVBM5jnRX0kVgeaSjJrK7QhZmatVizqbK5CkjT1o/9i
pQa3nGZtMoW6aRK3Iv2r/ycPJzY24reoOi8/7P+d7b8u1lyCZub1f9f2H1v5
j2i4eerr6xsaGjCQLXYbrZsKW7HIQIwNFo0WOgBIKBaES5LTFg29SLhk0ykk
P0C4WYPa1V/nkqNmheosac1Yrd/MCbe6urpGAyne7IBEaX5xULRIczotUsYI
MRdrVmIuTTrmj/0v27W1Iez9rlOVly9funzl8tWrV65du9LTc7Wn59r16z03
bly/efPGX/CxgPay/7z+2X8ZQHizs7NxFiSzbHVQb1FQUBi5a88f58x//t8n
4PPOu/M/3Lkbxrpe3PzNVIWFRWbszLnzsItY018y6EkUYOw/L3aRUJupSU6d
OmVaZDmCOOssOiOe+TVEVoEBjLoovRg0UAeYTpep05nLl0lhl/DTxo82HZs5
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
RX/RWnPy6EvPX1g4629pcd8c+OQvm1Zc+cOErCcf3v1fflj55pSrV11//ADt
7dP/YzGu5961SdrqvKQ1eKqMz8NEuRETHho9MbK6vaWuptYROWl04NiDeeXl
Jyq3jn1obFhGLZ6hK8uOF0U/Hzh6XVwu7pvqmhRki0hzfbVWVV6WuCH4keAt
eSUlOVHL8WS78NPU7KMOZ9pHeL5dFu0sPRY97WeBz6xOP1Pn+iqhpSXjhaCg
dfEFqKQwMzEqKiomJiY6OhqDgwcOpjqLtP+5iWulwrun/7z+/bT/EN6EhIT8
/HyUJy98KCpyXWmyXbRy7eKwDz+LTo1KcaY6izMLyvDBIPZoLoyL1m1/f8Wa
wsJC8Zc3RcgAFhwaPBbJxR9TYyuzY+xNLBywNPHXJDLGWgot8vLypBgAo7jJ
AqVUjDGXvDuoqBd58QX6I0Y9JBnEGVupU5wlG7aI0lmkJ+a7icSusUDr99h/
WZTUL2NJK7W5VMKyI7Z//3WgY+2z1ikJ+/dfnKUzspWadS3qgHHOvs/xw7zi
WFFT1JdNeAbes+2bAx9/E/X5jbULL0+f1DnlZeezTyb/4tHyP3925dJFaG+f
/udEvx4SPHVTgubMil0TEjo5KhsV5q2fMGbStswS61D8pknBIb9PyEE3slz2
iIRv+++MwsNrRKzTlTMnakJoaERstqwlafO4MeO25RQVORMiQizwZGttX4xM
KijOibGmTvy2/9lRU0KRJxuBseunhfRl3VdObVde0no898a5Krwr+s/r33/7
D+GNjY2Vl+3k5uZK8jwLWHbu+eTdpWF7444kZeRnFZbnHz9RUHYSA+zuT0jD
ITjIEuSNZ9o9GG8Zu+ujT6VCqU3Oi9Rwy9gduz+WUuWs6Rrl9UFShjnW2vL7
Umig7xqSetQiUW7vdtOa3Sx6cUq3pY1qccupDffYf+yqXS9dWZdZkmYw+6/T
SYfVU0qSqsSnf/91bE5qtk4qlEF2xKrapbOby4+dO9fe0dFeE/113MP/82pk
RM/yOcd/8eCFZx+7umRB17GCDmdWV9MZaG/f7uetHftw0MzPtf/Rq59/5GfL
s4tRjyNs7MNjV8fJ1LHhY0cHTozJdtnXvfBQ8NK4b2vOOfh/AkeviXa4VpH7
9fNBQevjc6X42HA8927GgayoZXjujUhr7P23+WfrKosKsg++HBT4wsqYb7vn
2IfY1QczsVtR1+L2j/Fry/O1FblxqwODxsXk3i395/Xvv/2H8OJ3K1mg0+mU
gU7hyMpaFb55xaZdCWk5joLS/ONV+GCAXRhxKCMzE2lzcnLMwmQ30+EYPDY9
I0Oj9NWUEpuWnn7LWFmahssb22SNub1IbWIXH0zhdtR0MF8El52drS/PlHOk
r4aTLuX1Iu+REx99cVyeAXbhI0c1m/ZcE7r1X8+yJtHTjWxaueY0+6816FF9
tZ35UlBNa/YfRgzkmpSSJINeSxoupZ7fuqoxKercubPnzrV17P+i5E/zK1Yu
rvjts0WPjb7yQkjHrBmXLl24jM/lS9Devv0/dmDFs3iwfD8y2uF0pkbtnvnC
MyGz97sWkJOJ59uJYXEyUdzGicEhU7/OxF525PQng0Pf3Xs43YEas13PvWEH
0111OlzPva+t/PhIugPlxm3Ec+9WaG9RqXNRaHBwyPTIA8lpaUei939yICUb
a4uc8lRwyMvhn34V/efNr4UEu77vjcoYtP+O5ITkL/fMDw6ZtHN/bFxcYsbd
0X9e/37afwjvwYMHMzIy5L27OKSvpsy0dDU5JXXtxq1LIz789Kv4pLQcfDD4
IHw7jDgkfUC4vMJXX3EprR48Vs6ahugLgdPT01EnHNZs2OIxNvHQYemPhOub
gZFEKtFXCstRcXPdz9aKpDyEy9RyHvXNw/pSYmmUNERD5KhUK+FigTPGyI9U
MqOEyFYnkiJ1CgxgybDw2H/TWcuA3Xxx6ED9163m0VZowoH6jxCpTebSGQVz
4Uc/2okf+xUV5e1tZ8+1tnQ01HWca2/NysgO+mln+9mu7vMdCbFddacuXroA
BYb2uvW/oip/4/QnrD9dcP29waPPL80sP2ktOA2PxGNXRUtDYjZMeDRwapRr
zty8hHD5O9t39xzKyvjy/waODo92uPqfW7B38YtWqqc/TnVGbRg7+oX1aZjL
eaz+xJFF4/+XTIHtqgNoV15NaeI7Yx4R47wN6/Dcu/LA0cH6n7L7V0HfMTrw
158eyRn2/vP699/+Q3i/+uormR2HMK/MBeejR49i4PrRU1D45dfR4Zs/XPDB
OnwwwC6MOCR16hRIIhZsYXH96PEUm2v9uqCvKZYQOQuSIS0tzfXbQd/YsE3b
DxyMyclz/S6ji5UFyq4UL6dS64dR2i75xSIzIhYTwYhd2WoqaYKUhy3cJFw8
JY++Tlm2pl37aSYRH/M6VOMg/deJJL8YJYn4D9J/mU4c9FqSIs3aPPZf1qX3
hTRBjurSXMWvXXbqg1nNFcVtba34df5cu/X0W32yKTbm/PmOrq7z3d2d+Fy4
0H3xYje0173/mXknG5qqy1xf4hWXVbY01R7LybD6n1d9pvlMTbHUX1B1urn5
dHGWq/+5JdXNjdafr5fmOJzHz7S0VBc7rTZmlZ86U1dTc6q+rjTXUVLd1Hzm
pKzZkVtS29hcf+pEVVUN/GtKXA91mbml9U2Nrr/5qTlTX3OqyWV3Dtb/7ONn
et+aYr1Spem4M2PY+8/r33/7D+Hdv38/jNLeI0eOiB0WjGWx0OrKysqGhgZ5
/Y7rX1dWVYmMSyBCxFl2xSKnCbHl5eUIkdj6+vqKigqJ1SWjsJSUFFky8mBX
siEWEyFW3vxTW1uLVIiVC0ZqA7oiHUsBkhxGSSgOUpV0D0apVtwkRIxSjC5N
xjKpZIBRJhWLlC3nUQ5pKu2229i87Afvv7jp+RWL3g6D91/yiLO5Lm/6rwm1
MwCzu/VfvnM4e7al7axLftvbz3aca7O+/j3nkt/ODjz9dnd3Xejugl567L8z
N9/1RJuT7W3/M11XuMNT/3FPZvSuy63/mY4s/FqZ0af/LpFxZmf6df95/ftp
/yG8e/fuxaHk5GQUgChsD1nIODU1VWaUnx2QPpk3KSkJh+CAQ4ctMJDyYMRu
qgUGyCOP3PILBSZFcokVf5lCLBILdJny80V+LRJ/GOEAT9QgboJEiYOkkrH4
YCsOstWlYYujWD48U3uRf3KCOsXNNGog8sBBWqp5pAwdy5/wibN0A4hF8stC
btl/LQNjHEJm7/uvgdoQ7/svRviLp9j79x+i6uWH/f9H9J/Xvz/2H8L7xRdf
SH6ZCE1ITExMtsBAO6ZVwS5bGWjr+vtoH6QDKFXOprZLzy/8tQOCnDU5O9pA
1KNJZCx2czoYNZtcHnK61U0skk12JQoc7kU8dUXSH224FKyxkkeMeuXIWK4Z
aZE0U/wlrV4/7D/7z/7fa/2H8H722WeZGZmpKalpR9OOpB45CpE+cjQ9LR1G
DGBPOZySkZ6BQ7BgizE+MOKQeCIQWxySsaTSDBKIEBixa84iu/CUVPJBZhnI
pOIgFuyKRaaQSiSh7oqPVI5diULO/rPLqmV1Go6P1i+Vi6csWZaPoxIlecRf
PtofGB2ZDilV2iIhSCU5zSaz/+w/+3+v9R/C+8knn/zB4u2339at8EcLDGZY
/KEf06dPVzvGbkaJFWB56623cEiMspUQMzkGaoS/W8LpFmZO7KLgGb2IUVYh
4ZpEU2FqGHUiLVIziN2sDT7m6swa3KbAIexKSW5Tmw3UFWGrDWf/2X/2/97p
P4T3448//n+EEEJuj9bW1itXrly7dq2np+fmTdf/X8Bf//rXbyz+ZoEBLDh0
8eJFCO+ePXuGu2RCCPF7fNJeCO+uXbuGu2RCCPF7fNJeCO+OHTuGu2RCCPF7
fNJeCG9kZORwl0wIIX6PT9oL4d2+fftwl0wIIX6PT9oL4d26detwl0wIIX6P
T9oL4d2yZcsQZnE4HDdu3PBo72+Ep75xYiACboPBMxNCiA34pL0Q3k2bNg1B
e/Pz833SXvgPYRZCCPEXfNJeCO+GDRuGMAu1lxBCTHzSXgjv+vXrhzBLXl6e
qb0OT+hReML/DqyNEELuVnzSXghveHj4EGZx015loOdeai8hZGTjk/ZCeMPC
woYwC7WXEEJMfNJeCO+6deuGMEtxcTFm6W/3qL3whP8QZiGEEH/BJ+2F8K5d
u3YIs9TU1LS1tXnpDE/4D2EWQgjxF3zSXgjvmjVrhjALpigsLPTSGZ4eH5IJ
IWTE4JP2QnhXr149hFn+/ve/41G2rq7ulp7wgSf8hzALIYT4Cz5pL4R31apV
Q5gFWopUENWysrLOzk7k7O8DO47CB57UXkLIyMYn7YXwrly58namg8AWFBRk
ZWXl9wN2HL1T6yKEkLsZn7QXwrtixYrhLpkQQvwen7R3hcVwl0wIIX6Pr9q7
fPny4S6ZEEL8Hp+0F8K7bNmy4S6ZEEL8Hp+0d5nFcJdMCCF+j6/au3Tp0uEu
mRBC/B6ftHepxXCXTAghfo+v2rtkyZLhLpkQQvwen7R3icVwl0wIIX6Pr9q7
ePHi4S6ZEEL8Hp+0d7HFcJdMCCF+D7WXEELsh9pLCCH2Q+0lhBD78VV7Fy1a
NNwlE0KI3+OT9i6yGO6SCSHE76H2EkKI/VB7CSHEfqi9hBBiP9ReQgixH2ov
IYTYD7WXEELsh9pLCCH2Q+0lhBD7ofYSQoj9UHsJIcR+qL2EEGI/1F5CCLEf
ai8hhNgPtZcQQuyH2ksIIfZD7SWEEPuh9hJCiP1QewkhxH6ovYQQYj/UXkII
sR9qLyGE2A+1lxBC7IfaSwgh9kPtJYQQ+6H2EkKI/VB7CSHEfqi9hBBiP9Re
QgixH2ovIYTYD7WXEELsh9pLCCH2Q+0lhBD7ofYSQoj9UHsJIcR+qL2EEGI/
1F5CCLEfai8hhNgPtZcQQuyH2ksIIfZD7SWEEPuh9hJCiP1QewkhxH6ovYQQ
Yj/UXkIIsR9qLyGE2A+1lxBC7IfaSwgh9kPtJYQQ+6H2EkKI/VB7CSHEfqi9
hBBiP9ReQgixH2ovIYTYD7WXEELsh9pLCCH2Q+0lhBD7ofYSQoj9UHsJIcR+
qL2EEGI/1F5CCLEfai8hhNgPtZcQQuyH2ksIIfZD7SWEEPuh9hJCiP1Qewkh
xH6ovYQQYj/UXkIIsR9qLyGE2A+1lxBC7IfaSwgh9kPtJYQQ+6H2EkKI/VB7
CSHEfqi9hBBiP9ReQgixH2ovIYTYD7WXEELsZwjae5IQ/yfyrqeVjGjO+IJq
b3cvXV1dstVB9x3Fm/y3UwPrv/38/li/aO/NuxiUd4WMaKCo3j8km9rr/f1i
Xv8mZmxfn+7erRzy4Z7q7urdWkm6uzz4+Hq/s/6RV79o7+W7GJR3jYxohqa9
A1zznvHm/vLqvr4NH+/uWdZ/r9Qv2ttyu9RVVdU09jXV11TV1Dd6dm9prKk5
42VqlNdDRjReai8uBrfn3qHdC97cg97cm97E3ilY/8ir31ftzT+w+Bf3BQSM
+k1iTeu3Mlr8VcioABc/me2oF2Nj1PInLFPAzE/ysB+/9rX77rsvdNqOcuvo
R5MD3vhzmffaO9xfe5B/LN5oL66EXbt2efzOYaDf73y9H+/U/evrfcr67836
RXvbvOZ4akxc7NZ/G/V4cl27ZWjY8FjArzflYRQz/4f/ND8Jg9PZ6wJGjXc2
t7dV7vu3790fX5U78SfTy9oa1j7286i69op9kwNe2ecx+ZYtW86ePetmRHl/
ISOaW2pvc3MzhBeX6y2/cxjomh/IZ8DYrt5t3+8MvbmX71gNrH9E1y/ae94X
OtsO/+9RT6Sc7nSNm1Mwzmh2jZuzlgT8YHH1+fOO1ff95IMsy7cp7P6AuVFR
IfevbD5//vPXXt2Xtv9n3596rK3TY+aQkJDZs2fX1dWZRpT3VzKiGVx7TeEV
7V28ePFA3zmY98JA9+lA3M49aN5r3+3e3rMT6x/Z9Yv2XvSFS+1pj416Kq3l
ktv4YvWXAd9zjTPX3X//8lzLtzNubsADy9P2zfjPD/xm/BNPPAfnj3IbBsr8
rMX48eOdTqcaUd43ZEQziPbikAqvfN+72EKee/tf57dz/96O3Zv71Bt/1n/v
1C/ae9UXrnVmPj7qKUf7Nbfx1cbYgFFPY5wd/sADKwvEOfHdgJ+udF69erG9
pTElfOwvx898+Ze//MmoByMymvtn/lUvzz33XGVlpRipvSOegbS3sbHRFF75
vtfU3v73Rd+bpHc78N8aeXNP+Yqv9yDrvzfrF+316b9KX+/Ogt5md1zXcX63
a9xdtCLgB8ubenpyIgIejCiyfM9tfjBgfnIrRpcrNwc8uTl555vzky/0VIY9
Ps/RP/OvLSZOnFhQUKBGlPc3MqLxqL2m8DY1Nem4v/Z68zxzO/emN/m9ue9u
Jz/rH3n1i/Ze94m29MdHPZjedtXa6djxZMC0fTUYOVZDZ49icKFofcD355y4
cuN62yF4Hm66eeN62ZTv/zTl/M3qTyfOjD97vTTi8fmO/okhvAsWLGhrazON
1N4RT3/tHUh4RXuXLFnizXPv7dyPd8rH1/ua9d879Yv23vCaom1jA3rZmHce
lqunE56TvzH7wfvlF29aXlePrn5GfN7ZX4Xdr6cFvBHV4DrSnD7lp/ff/8DY
PVasG3v27IHYuhn5ncOIx017GxoaPAovxtgusRjo37XdqXtwwHuqq3fr3e+h
vt7XrP/eqf/O/Jvia50tLe2X+tq62lvau3rkMIbXhpqbf+cw4jG1101s3cai
vUuXLv327xxu+x4c6H65nftrwPuuT/B39yDrvzfrF+0d7j/wHAz+24oRj2rv
4MIr46UWdr1oipB/IP+gl4/dQXz6Ezjid/j0PgcI77Jly/D0u2jRovfee2/B
ggXz5s2bM2fOrFmzZs6c+fbbb8+YMeOtt9568803p02bNnXq1ClTprz++uuv
vvrqK6+8Mnny5EmTJk2cOHHChAnjx49/2eLfLX7by0uEEOK3qJSJsonKQe4g
epA+CCBkEGIISYQwQh4hkpBKCCZkE+IJCYWQQk4hqpBWCCxkFmILyYXw/n+Z
HMqR
    "], {{0, 152}, {468, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Magnification[0.5],
  ImageSizeRaw->{468, 152},
  PlotRange->{{0, 468}, {0, 152}}]], "Text",
 CellChangeTimes->{3.588909026393446*^9},
 TextAlignment->-0.5],

Cell[TextData[{
 "The ",
 StyleBox["notebook",
  FontSlant->"Italic"],
 " is divided into ",
 StyleBox["cells.",
  FontSlant->"Italic"],
 " Each cell can be assigned with a different style (Title, Subtitle, Text, \
Input/Output Expression, etc.). For calculations the most important cells are \
the input and output."
}], "Text",
 CellChangeTimes->{{3.587360738091748*^9, 3.587360849096294*^9}, 
   3.587360899046195*^9}],

Cell[TextData[{
 "To enter input, just start typing. To ",
 StyleBox["evaluate",
  FontSlant->"Italic"],
 " the input, press \[ShiftKey]\[LeftModified]\[EnterKey]\[RightModified] (or \
just \[EnterKey] on the numeric keypad). The output cell with result will \
appear. To enter another input, just continue typing."
}], "Text",
 CellChangeTimes->{{3.587360900848727*^9, 3.587360932996943*^9}, {
  3.5873609674837227`*^9, 3.587361028841754*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnXlcVFe27ysk3bc/93M/n/s+75/7xtt9X7/77u1OYkxH7X7d6duKQOd2
ngFN3zgn0RA1ydVgoibEGUfECTRaONsBB0AZZFTGYiqGYiiQYpSxAAsomQtT
5vLWOatqs2u0ECwsXN9PeT777LP22muvOufH5ng4+x9Wf75ojZtEIvnyJ7BZ
tOqreV98scr/3Zdgx91/08erX4SCFP5VviCRCOWenp6Ojo66urrS0tLCwsKC
ggK5SL5IXl5erkgOR7YRmZEsjkwbZBAEQTzz2FIwXuWY9DEx5BUSNRPEE1UU
FRWkFQS2rKystrYWJBeEt729vaKiory8/N69e11dXX3W6O3ttVrvCKwtFhx3
ZdWyXwQLthraOWSHJ2hlFqGDHlj8lva2kkP5twrl3yqUf6ttn4X8g8CCzJaL
gPDW1NRAoa2trVNEzQFHsQBH20XUprSJtIrgLtbDLhhjPatEJ7xbVo/NmQd0
i5bwA8KyXzzEPJtFa1bJ1zO3Vruz48SyX34sZn7MAuM9mMXTzgGtYLBWW1H+
Lful/FP+XS7/wP3796EhzH5BeIuLi2GLAbe0tGDAWACbFpFWI2ZlACPHaGGX
j5z3w8ywkq/hE8hyaNaE7501Z73zmAXMzHhLVmbxsDixd96DWVpYpzjANg6z
waIB68VyvMyVWdop/5R/yv80zj+ocW1tLQhvbm5uc3NzixE0bhZhBbDnd6HQ
JNLMgUfRCb+Lbfkavi0UWBPekhkwD/z3wmywLSswV+iZpYIlhPfMosUaZsyP
Ap00W2A5WIzBzCcfG3bBzJgTsyBdK/9VSbcaG+G3qDoHP5T/yc0/Gyw/BOaZ
zv9nNv+wxf9Eg4unvr6+oaEBCriF3UbxooIt1mABKxtEGkVYAQCHWAPN0ck9
kQYj2By9sS7QPwDN+RhYPbNnfeFRPkJmjG75tix+3ieY1dXVNXJg8HwGsBXz
jwYMFiTfHQsSy9CEHywfCT80zJgr5r8sNKQh8Jvumoq+vt6+/r6Bgf7Bwf6h
oYGhocHh4SGdbnhkRPcQPiKgvZR/Ov8p/1gA4ZXJZPAtoGfcskK9iFxecCr0
7L9v3Lzgz0vgs+HLzd9Kz0BlnREze95VQUEh33b9F5tgF9ry9uiBfYkIVFr2
C7vgkCWTOampqeFrcDgIGrNeWI8w52dNcBRQgEo2KHYysIasAN2xYbLu+OFj
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
+oavXS98VvgmqR5zL8KgnNbu1g5nXTwWGLh7rptEMu8TKFxMaxynB4Ignkcm
XXtBePfu3euM0FF7B2s/Ntx5GAhZHl54v47T3uHQZVIz7UX0g4Nd3X3Gz5D+
MT3hHYMPK63YDUf7L/ZZ8Y7wP2kz5i/39vYPrxunB4IgnkcmXXtBePfs2eOM
0AdrBNUdZBNd8a7C47RXN9j3YPCHyojrnt4XFi47Dx+YLStt3gfWl8d+GxDw
tTCtlUh8/PYGR5ZZk89h2/ccHPRAEMTzxaRrLwhvQECAM0IH7fXN7tXVbPBF
sQV1jSg11d5LvqfPK7/HMmpvaeiJt6Rqh/sYvr5GYoJPmLVndIdj/N/6JtLq
jNdBDwRBPF9MuvYGiDgrfAuE5xxS23Q/mNfrNEee/DkHgiCISeZpaO/u3bud
Fb4FuvaTO8LWGZ/vNTIc+6TP9xIEQTwNJl17QXh37drlrPAJgiBcBjuvbkAm
or27RJw1FIIgiOnDBLV3586dUxQ4QRCECzMR7d0pMkWBEwRBuDAT1N7t27dP
VeQEQRCuy0S0d7vIVEVOEAThukxQe7dt2zZVkRMEQbguV6/f5XfHpb3bRKYq
coIgCNdlIvNe0l6CIIgng7SXIAjC+ZD2EgRBOJ8Jau/WrVunKnKCIIhnE1tr
xPNMRHu3ijhrNE5A36S4c1F6XBqe0kyv4iEI4kl52mvETy/t1acGvCGRSOav
WSMsNPzS5mqSX4IgnpSnukb809be4dbqnb7nPb1DPX2j0+uGrVgM9rV2j0zS
YvF9R/9KshCXAerPnusmCVL0TdI4CIJ4Hnl6a8Q/Ve3Vd5aC6gYmtD4Y1NVk
pED5et33ZjbDylteQS2TtVh8v6bNsMyEJhYmwCdIewmCmBhPaY34p6q9lWHn
/ixtHtu9eO5dqbo6Ii5MXJStEgqlbUd8T3t6X4hRquwvFj9ehJsPtNAwQRCT
wdNYI/6pam/qvjNS5dhSk8NVtxfuuFsaehnntFjQKpLfD7lnWMXYYGixWHxP
837fy7hG/FrfywHR7fb7rYvdCJPeUJr0EgQxMVz0OYeiE6Fbbz9guy0J194N
aQHJPc1pb78yaWVIi6n2Wi5Y/MODsTXihZWLbffZlxjgBcJ7RUnCSxDEpOFa
2qspiJ/vnVyHdwwGW3d6C4paeuHcB2EaqIjZchZEuB/mvVL1Y7S3p/krbymu
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
UVGeL+9p0Wguf7AyPPXKr19aXdTeZdWzp6enn59fXV0dXwnhfU9Ma+xrLy+8
qL3btm2zdc+BvxZsXae2mMg1yF9rY7sTmztR/NM7ftTeB+OhtyP1d25zU1t7
zcoPVFclLwjljIMvv7w7V7TtivlC8sru1PBP/tsrf1r8+9+/Dcbnchtsef6j
yOLFi7Ozs1klhPeImNbY0V44xIQX7/duE8F5r+V5PpHrdyL1jlynjthT/M9P
/Ki9A+NhsCvjTbe5mR2DZuWBxmiJ2zwoyw698soeORrf+lLy6p7sgYEHHa2N
yYe8/2Xx+vf+5V9+6TYjKL3F0vNbRt5+++2KigqsJO2d9tjS3sbGRl548X4v
r72W14XpRWLc2n7WyJFraryM9xqk+J/P+FF7x/W/0sM9WaC3svvDrJzfI5R7
CgMkP9rdPDSUEySZEVQo2nYenyHZnNAGpb6K45I/HE+QrtmcoB2qCHxzU6al
538VWbp0qVwuZ5UQ3g/EtMaq9vLC29zczMqW2uvIfGYi16Yj/h257ibin+Kf
fvGj9g6Pi/a0N91mpLUPiDv3T/9B4hteDaXMfaCzd6CgLTwseWnj3X7dcHsi
WCY1j+iGy1a99GqyZkR1cen6WPVwadCbmzMtHYPwbtmypb29na8k7Z32WGqv
LeFF7d2+fbsj896JXI+TZTPe65rif37iR+3VOUzhCW/2LqajeRqoGbgX9zY+
Y/ajb8ofjIhWA3f2zUebDVcqYTfCV/JxVINwpCVt1asvv/yK91mxrRlnz54F
sTWrpHsO0x4z7W1oaLAqvFCG7XYRW3/XNlnXoM1rqtu4dez30PFe1xT/8xP/
5PxN8WBXa2tHr2ldd0drR/cQHobi4JP6puccpj289pqJrVkZtXfnzp2G5xwm
fA3aul4mcn3ZvO5MGo9dgxT/8xk/au9UP+BpD/rbimkP0177wovlnSLOetEU
QTxFntLLxyaRcT0CR7gc43qfAwjvrl27YPa7devWr7/+esuWLZs2bdq4cePn
n3++fv36zz777JNPPlm7du2aNWt8fX1Xr169atWqDz/8cOXKlStWrFi+fPmy
ZcuWLl26ZMmSxYsXvyfyZ5F3jSwiCIJwWZiUobKhyoHcgeiB9IEAggyCGIIk
gjCCPIJIglSCYIJsgniChIKQgpyCqIK0gsCCzILYguSC8P5/rvvGUg==
    "], {{0, 152}, {
    468, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Magnification[0.5],
  ImageSizeRaw->{468, 152},
  PlotRange->{{0, 468}, {0, 152}}]], "Text",
 CellChangeTimes->{3.588909029239118*^9},
 TextAlignment->-0.5],

Cell[CellGroupData[{

Cell[TextData[{
 "Getting Started: ",
 StyleBox["Basic Syntax",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.5873612022939177`*^9, 3.587361203867831*^9}, {
  3.587361271311215*^9, 3.587361285185031*^9}, {3.5873613219603*^9, 
  3.58736132616807*^9}}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " is case sensitive! Built-in functions are capitalized."
}], "Note",
 CellChangeTimes->{{3.5873647812445507`*^9, 3.587364844913274*^9}}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " supports standard arithmetic operators: + (add), - (subtract or unary \
minus), * (multiply), / (divide), ^ (power)."
}], "Text",
 CellChangeTimes->{{3.587361793082258*^9, 3.587361814071405*^9}, {
  3.5873618668469963`*^9, 3.587361867869608*^9}, {3.587361921621402*^9, 
  3.5873619535790863`*^9}, {3.5890128132643337`*^9, 3.5890128491186323`*^9}}],

Cell[BoxData[
 RowBox[{"10", "+", "20"}]], "Input",
 CellChangeTimes->{{3.587362158777568*^9, 3.58736215962116*^9}}],

Cell[BoxData[
 RowBox[{"-", "10"}]], "Input",
 CellChangeTimes->{{3.587362161647073*^9, 3.5873621634767942`*^9}}],

Cell[BoxData[
 RowBox[{"10", "-", "20"}]], "Input",
 CellChangeTimes->{{3.587362164387369*^9, 3.58736216680497*^9}}],

Cell[BoxData[
 RowBox[{"10", "*", "20"}]], "Input",
 CellChangeTimes->{{3.5873621693711977`*^9, 3.587362170316553*^9}}],

Cell[BoxData[
 RowBox[{"10", "/", "20"}]], "Input",
 CellChangeTimes->{{3.587362172091229*^9, 3.5873621727564774`*^9}}],

Cell[BoxData[
 RowBox[{"10", "^", "20"}]], "Input",
 CellChangeTimes->{{3.5873621738376923`*^9, 3.5873621752205887`*^9}}],

Cell[TextData[{
 "Multiplication can be entered with * operator or you can just follow the \
number by symbol (without *) or put a single space between two numbers (",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will convert the space into multiplication symbol)."
}], "Text",
 CellChangeTimes->{{3.587361959453989*^9, 3.58736205039951*^9}, {
  3.587362098280416*^9, 3.587362109480399*^9}}],

Cell[BoxData[
 RowBox[{"2", "*", "4"}]], "Input",
 CellChangeTimes->{{3.5873621105083427`*^9, 3.5873621122866*^9}}],

Cell[BoxData[
 RowBox[{"3", " ", "4"}]], "Input",
 CellChangeTimes->{{3.587362114939003*^9, 3.5873621179024067`*^9}}],

Cell[BoxData[
 RowBox[{"2", "*", "a"}]], "Input",
 CellChangeTimes->{{3.587362135594565*^9, 3.587362136965638*^9}}],

Cell[BoxData[
 RowBox[{"2", "a"}]], "Input",
 CellChangeTimes->{{3.587362121232046*^9, 3.5873621351545067`*^9}}],

Cell[TextData[{
 "Calling ",
 StyleBox["functions",
  FontSlant->"Italic"],
 " is the basic way of doing calculations in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". There are many ways how to call the function, the most general one is to \
enter the function name followed by square brackets with arguments of the \
function. If the function has more arguments, they are separated by commas."
}], "Text",
 CellChangeTimes->{{3.587361357191863*^9, 3.5873615436485653`*^9}, {
   3.587361629895463*^9, 3.587361653620768*^9}, 3.5890128992504597`*^9}],

Cell[BoxData[
 RowBox[{"Expand", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"a", "+", "b"}], ")"}], "^", "3"}], "]"}]], "Input",
 CellID->644985825],

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"Pi", ",", "20"}], "]"}]], "Input",
 CellChangeTimes->{{3.58736166518791*^9, 3.5873616694293833`*^9}, {
  3.587365442300063*^9, 3.587365446103606*^9}}],

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"10", "/", "20"}], "]"}]], "Input",
 CellChangeTimes->{{3.587362194175888*^9, 3.587362196152342*^9}}],

Cell[BoxData[
 RowBox[{"DateString", "[", "]"}]], "Input",
 CellChangeTimes->{{3.5873617000240717`*^9, 3.587361702270211*^9}}],

Cell["\<\
Many common function can be  entered using operators and other special \
notations. For example, the + operator is internally represented as \
Plus[x,y]. You can use FullForm function to see the representation of the \
expression.\
\>", "Note",
 CellChangeTimes->{{3.587363876796748*^9, 3.587363982207583*^9}, 
   3.589012901435152*^9}],

Cell[BoxData[
 RowBox[{"x", "+", "y"}]], "Input",
 CellChangeTimes->{{3.587363984262005*^9, 3.587363984967793*^9}}],

Cell[BoxData[
 RowBox[{"FullForm", "[", 
  RowBox[{"x", "+", "y"}], "]"}]], "Input",
 CellChangeTimes->{{3.587363986750593*^9, 3.587363991083479*^9}}],

Cell[BoxData[
 RowBox[{"FullForm", "[", 
  RowBox[{"2", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.5873639953186626`*^9, 3.587363998447579*^9}}],

Cell[BoxData[
 RowBox[{"FullForm", "[", 
  RowBox[{"x", "-", "y"}], "]"}]], "Input",
 CellChangeTimes->{{3.5873640008510027`*^9, 3.5873640065753393`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Getting Started: ",
 StyleBox["Lists",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.5873612022939177`*^9, 3.587361203867831*^9}, {
  3.587361271311215*^9, 3.587361285185031*^9}, {3.5873613219603*^9, 
  3.58736132616807*^9}, {3.5873640159575853`*^9, 3.5873640204216433`*^9}}],

Cell[TextData[{
 "List is an important data structure in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", it is used to represent vectors, matrices, data, and in many common \
inputs and outputs. List is represented by a sequence of elements enclosed in \
curly braces."
}], "Text",
 CellChangeTimes->{{3.5873640325954638`*^9, 3.587364129146039*^9}, 
   3.589012906452121*^9}],

Cell["Example: list of three numbers.", "Text",
 CellChangeTimes->{{3.587364140176682*^9, 3.587364150513155*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"10", ",", "20", ",", "30"}], "}"}]], "Input",
 CellChangeTimes->{{3.5873641514506063`*^9, 3.587364155650198*^9}}],

Cell["Internal representation is List[10,20,30]", "Note",
 CellChangeTimes->{{3.5873641686454897`*^9, 3.5873642198069487`*^9}}],

Cell[BoxData[
 RowBox[{"FullForm", "[", 
  RowBox[{"{", 
   RowBox[{"10", ",", "20", ",", "30"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.58736422303341*^9, 3.587364227823896*^9}}],

Cell[TextData[{
 "Following examples shows common uses of lists in various ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " computations."
}], "Text",
 CellChangeTimes->{{3.587364255078671*^9, 3.587364292884523*^9}}],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", 
     RowBox[{"2", "Pi"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.587364310323167*^9, 3.5873643257989683`*^9}}],

Cell["\<\
The list {x, 0, 2Pi} specifies that the value of variable x goes from 0 to 2\
\[Pi].\
\>", "Note",
 CellChangeTimes->{{3.5873643427072487`*^9, 3.587364376679372*^9}}],

Cell[BoxData[
 RowBox[{"FindMinimum", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.587364466188754*^9, 3.5873644923089247`*^9}}],

Cell["\<\
Find a local minimum, starting at x=5. The output list contains the value of \
the local minimum (-1) and the position (4.712...). The position is \
represented by rule \[Rule] which will be explained in separate chapter.\
\>", "Note",
 CellChangeTimes->{{3.5873645268526087`*^9, 3.587364637072941*^9}}],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"2", "^", "n"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "8"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.587364651099193*^9, 3.587364669289185*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"10", ",", "20", ",", "30"}], "}"}], "+", 
  RowBox[{"{", 
   RowBox[{"101", ",", "202", ",", "303"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.5873646776006603`*^9, 3.587364706719717*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Basic Operations", "Subsection",
 CellChangeTimes->{{3.5873612022939177`*^9, 3.587361203867831*^9}, {
  3.587361271311215*^9, 3.58736127452148*^9}, {3.587365565279851*^9, 
  3.587365567785675*^9}}],

Cell[TextData[{
 "In ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " you can define variables and you own functions. You can merge several \
expressions into one complex computations. In this sections we will show \
how."
}], "Text",
 CellChangeTimes->{{3.5873656827225122`*^9, 3.587365730804414*^9}}],

Cell[CellGroupData[{

Cell["Basic Operations: Variables", "Subsubsection",
 CellChangeTimes->{{3.5873657393020687`*^9, 3.587365749364839*^9}, {
  3.5873672288930273`*^9, 3.5873672425858097`*^9}}],

Cell["Using the = sign you can assign value to a variable.", "Text",
 CellChangeTimes->{{3.587365775904581*^9, 3.5873657957143373`*^9}, 
   3.589012909457794*^9}],

Cell[BoxData[
 RowBox[{"x", "=", "5"}]], "Input",
 CellChangeTimes->{{3.58736581590631*^9, 3.5873658167385902`*^9}}],

Cell[BoxData[
 RowBox[{"x", "*", "y"}]], "Input",
 CellChangeTimes->{{3.587365820421896*^9, 3.5873658315220823`*^9}}],

Cell[BoxData[
 RowBox[{"x", " ", "y"}]], "Input",
 CellChangeTimes->{{3.587365833060197*^9, 3.5873658339431963`*^9}}],

Cell[BoxData[
 RowBox[{"2", " ", "3"}]], "Input",
 CellChangeTimes->{{3.587365928419427*^9, 3.587365929518792*^9}}],

Cell[BoxData["xy"], "Input",
 CellChangeTimes->{{3.587365835813485*^9, 3.587365836154832*^9}}],

Cell["\<\
Be careful to put a space between symbols when the multiplication is needed. \
The previous example uses symbol \[OpenCurlyDoubleQuote]xy\
\[CloseCurlyDoubleQuote] (without any value assigned) except the x multiplied \
by y.\
\>", "Note",
 CellChangeTimes->{{3.5873658470744534`*^9, 3.587365942981386*^9}}],

Cell["You can review the definition of the variable by ? operator.", "Text",
 CellChangeTimes->{{3.587365961044305*^9, 3.5873659828442*^9}}],

Cell[BoxData[
 RowBox[{"?", "x"}]], "Input",
 CellChangeTimes->{{3.587365984088235*^9, 3.5873659847250013`*^9}}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can use multiple contexts (similar to Java packages) the \
\[OpenCurlyDoubleQuote]Global\[CloseCurlyDoubleQuote] in previous output is \
the default context. We don\[CloseCurlyQuote]t need to go into details about \
the contexts now."
}], "Note",
 CellChangeTimes->{{3.587365993541349*^9, 3.587366066801199*^9}}],

Cell["\<\
When definitions are no longer needed it is a good idea to clear them.\
\>", "Text",
 CellChangeTimes->{{3.587367245591188*^9, 3.5873672883122787`*^9}}],

Cell[BoxData[
 RowBox[{"Clear", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.5873672954337053`*^9, 3.587367297755027*^9}}],

Cell["\<\
After x has been cleared, x represents just a symbol without any value \
assigned.\
\>", "Text",
 CellChangeTimes->{{3.5873673093310833`*^9, 3.587367342102584*^9}, 
   3.5890129154883347`*^9}],

Cell[BoxData["x"], "Input",
 CellChangeTimes->{3.5873673437206783`*^9}],

Cell[BoxData[
 RowBox[{"?", "x"}]], "Input",
 CellChangeTimes->{{3.587367344935753*^9, 3.587367345215576*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Basic Operations: Using previous results", "Subsubsection",
 CellChangeTimes->{{3.5873657393020687`*^9, 3.587365749364839*^9}, {
  3.58736736362399*^9, 3.5873674203879957`*^9}, {3.58736746525858*^9, 
  3.587367467922267*^9}}],

Cell["\<\
When the computation consists of several steps, you can use the results of \
one step as an input of the following step. This can be done using % symbol \
which represents the last result (output).\
\>", "Text",
 CellChangeTimes->{{3.587367484380817*^9, 3.587367576734915*^9}}],

Cell[BoxData[
 RowBox[{"10", "+", "20"}]], "Input",
 CellChangeTimes->{{3.587367541647235*^9, 3.5873675424490423`*^9}}],

Cell[BoxData[
 RowBox[{"2", "*", "%"}]], "Input",
 CellChangeTimes->{{3.587367544355022*^9, 3.587367547642207*^9}}],

Cell[BoxData[
 RowBox[{"%", "-", "100"}]], "Input",
 CellChangeTimes->{{3.587367690143362*^9, 3.5873676925404873`*^9}}],

Cell["\<\
% represents the output of last evaluated expression, not the previous output \
line. Be careful when evaluating expression in different order.\
\>", "Note",
 CellChangeTimes->{{3.587367588006794*^9, 3.58736768023538*^9}}],

Cell["Another way is to save the current output into variables.", "Text",
 CellChangeTimes->{{3.587367708434368*^9, 3.587367753696897*^9}}],

Cell[BoxData[
 RowBox[{"a", "=", 
  RowBox[{"10", "+", "20"}]}]], "Input",
 CellChangeTimes->{{3.5873677573758173`*^9, 3.5873677595548897`*^9}}],

Cell[BoxData[
 RowBox[{"b", "=", 
  RowBox[{"2", "*", "a"}]}]], "Input",
 CellChangeTimes->{{3.587367761527034*^9, 3.58736776392177*^9}}],

Cell[BoxData[
 RowBox[{"b", "-", "100"}]], "Input",
 CellChangeTimes->{{3.5873677663090353`*^9, 3.587367766905628*^9}}],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"a", ",", "b"}], "]"}]], "Input",
 CellChangeTimes->{{3.587367769761571*^9, 3.587367771705669*^9}}],

Cell[TextData[{
 "The following example (taken from M101: A First Course in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ") shows the task of counting the occurrences of characters in the nucleoide \
sequence for a human gene."
}], "Text",
 CellChangeTimes->{{3.587367777408485*^9, 3.587367880036666*^9}, 
   3.589012921108502*^9}],

Cell["\<\
First, import the data (string sequence) for the human gene that encodes \
mitochondrial ribosomal proteins.\
\>", "Text",
 CellChangeTimes->{{3.5873679108117447`*^9, 3.5873679499382963`*^9}, 
   3.589012934428473*^9}],

Cell[TextData[{
 "The GenomeData requires the Internet connection to import the data from \
Wolfram database. When executed for the first time, you should see the \
progress dialog similar to this: ",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
+i/dVsTh
     "], {{0, 35}, {371, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSize->Automatic,
   ImageSizeRaw->{371, 35},
   PlotRange->{{0, 371}, {0, 35}}]], "Input"]
}], "Note",
 CellChangeTimes->{{3.587367987120194*^9, 3.587368074886159*^9}, 
   3.589012941858984*^9}],

Cell[BoxData[
 RowBox[{"gene", "=", 
  RowBox[{"GenomeData", "[", "\"\<MRPS29P2\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.587367881178831*^9, 3.587367892188196*^9}}],

Cell["List the individual characters in the string.", "Text",
 CellChangeTimes->{{3.587368086454946*^9, 3.5873680984534817`*^9}}],

Cell[BoxData[
 RowBox[{"chars", "=", 
  RowBox[{"Characters", "[", "gene", "]"}]}]], "Input",
 CellChangeTimes->{{3.5873680997592287`*^9, 3.587368106935522*^9}}],

Cell["\<\
Tally the individual characters, listing each with its multiplicity.\
\>", "Text",
 CellChangeTimes->{{3.5873681113987226`*^9, 3.587368130708346*^9}}],

Cell[BoxData[
 RowBox[{"Tally", "[", "chars", "]"}]], "Input",
 CellChangeTimes->{{3.5873681319884443`*^9, 3.587368135790559*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Basic Operations: Sequences of operations", "Subsubsection",
 CellChangeTimes->{{3.5873657393020687`*^9, 3.587365749364839*^9}, {
  3.58736736362399*^9, 3.5873674203879957`*^9}, {3.58736746525858*^9, 
  3.587367467922267*^9}, {3.587368182372731*^9, 3.5873681894743557`*^9}, {
  3.587383654624415*^9, 3.587383655415963*^9}}],

Cell["\<\
Several steps of the calculation can be organized into a single input by \
using semicolons to separate the statements.\
\>", "Text",
 CellChangeTimes->{{3.587368196714625*^9, 3.587368226113338*^9}}],

Cell["\<\
The semicolon at the end of the input line will hide the output cell.\
\>", "Note",
 CellChangeTimes->{{3.5873682343613977`*^9, 3.5873682701277103`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"gene", "=", 
   RowBox[{"GenomeData", "[", "\"\<MRPS29P2\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"chars", "=", 
   RowBox[{"Characters", "[", "gene", "]"}]}], ";"}], "\n", 
 RowBox[{"Tally", "[", "chars", "]"}]}], "Input",
 CellChangeTimes->{{3.587367881178831*^9, 3.587367892188196*^9}, {
  3.587368293889986*^9, 3.5873682963517027`*^9}}],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"gene", ",", "chars"}], "]"}]], "Input",
 CellChangeTimes->{{3.587368313045185*^9, 3.5873683174960213`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Basic Operations: Composing functions", "Subsubsection",
 CellChangeTimes->{{3.5873657393020687`*^9, 3.587365749364839*^9}, {
  3.58736736362399*^9, 3.5873674203879957`*^9}, {3.58736746525858*^9, 
  3.587367467922267*^9}, {3.587368326463293*^9, 3.58736833008564*^9}}],

Cell["\<\
Another way of building up the calculations is by using functions as the \
arguments of other functions.\
\>", "Text",
 CellChangeTimes->{{3.587368343662794*^9, 3.587368413322888*^9}}],

Cell[BoxData[
 RowBox[{"Tally", "[", 
  RowBox[{"Characters", "[", 
   RowBox[{"GenomeData", "[", "\"\<MRPS29P2\>\"", "]"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.58736842625383*^9, 3.5873684501308537`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Basic Operations: Defining functions", "Subsubsection",
 CellChangeTimes->{{3.5873657393020687`*^9, 3.587365749364839*^9}, {
  3.58736736362399*^9, 3.5873674203879957`*^9}, {3.58736746525858*^9, 
  3.587367467922267*^9}, {3.587368326463293*^9, 3.58736833008564*^9}, {
  3.5873684858507347`*^9, 3.587368488808364*^9}}],

Cell[TextData[{
 "Definitions (as shown in ",
 StyleBox["variables",
  FontSlant->"Italic"],
 " section) can also be used to define your own functions."
}], "Text",
 CellChangeTimes->{{3.587368497776278*^9, 3.587368547790447*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{
   RowBox[{"x", "^", "2"}], "+", 
   RowBox[{"x", " ", 
    RowBox[{"Sin", "[", "x", "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.587368550355988*^9, 3.587368566592886*^9}}],

Cell["\<\
The underscore in f[x_] is important, it indicates that the argument of f can \
be anything, not just the literal symbol x.\
\>", "Note",
 CellChangeTimes->{{3.587368641244545*^9, 3.587368680554058*^9}}],

Cell[BoxData[
 RowBox[{"f", "[", "10", "]"}]], "Input",
 CellChangeTimes->{{3.5873685873344727`*^9, 3.587368589174329*^9}}],

Cell[BoxData[
 RowBox[{"f", "[", "\[Alpha]", "]"}]], "Input",
 CellChangeTimes->{{3.5873685999891148`*^9, 3.587368602632173*^9}}],

Cell[BoxData[
 RowBox[{"?", "f"}]], "Input",
 CellChangeTimes->{{3.587368605966416*^9, 3.58736860622987*^9}}],

Cell[BoxData[
 RowBox[{"Clear", "[", "f", "]"}]], "Input",
 CellChangeTimes->{{3.587368613421797*^9, 3.587368614359653*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Basic Operations: Working with lists", "Subsubsection",
 CellChangeTimes->{{3.5873657393020687`*^9, 3.587365749364839*^9}, {
  3.58736736362399*^9, 3.5873674203879957`*^9}, {3.58736746525858*^9, 
  3.587367467922267*^9}, {3.587368326463293*^9, 3.58736833008564*^9}, {
  3.5873684858507347`*^9, 3.587368488808364*^9}, {3.587383636639133*^9, 
  3.5873836415283527`*^9}}],

Cell[TextData[{
 "There are many functions for working with lists in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". We create a testing data a show, how to extract parts of the list."
}], "Text",
 CellChangeTimes->{{3.587383668488163*^9, 3.587383738749681*^9}}],

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{"Range", "[", 
   RowBox[{"1", ",", "100", ",", "9"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5873837419404078`*^9, 3.5873837626463127`*^9}}],

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{"data", ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.5873837688395348`*^9, 3.587383774685769*^9}}],

Cell["\<\
Using negative number we get the part from the tail end of the list.\
\>", "Text",
 CellChangeTimes->{{3.587383842186207*^9, 3.587383863153894*^9}}],

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{"data", ",", 
   RowBox[{"-", "2"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.587383777740203*^9, 3.587383780589151*^9}}],

Cell["Extract the subset of elements:", "Text",
 CellChangeTimes->{{3.5873838779607697`*^9, 3.587383886106373*^9}}],

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{"data", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.5873837931354647`*^9, 3.587383808949292*^9}, {
  3.5873838964579477`*^9, 3.58738389951445*^9}}],

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{"data", ",", 
   RowBox[{"1", ";;", "5"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5873838023342943`*^9, 3.587383820316165*^9}, {
  3.587383901857486*^9, 3.58738390316908*^9}}],

Cell[BoxData[
 RowBox[{"Take", "[", 
  RowBox[{"data", ",", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.587383904615093*^9, 3.5873839068315783`*^9}}],

Cell["Short notation of Part function:", "Text",
 CellChangeTimes->{{3.587383955574379*^9, 3.587383969605852*^9}}],

Cell[BoxData[
 RowBox[{"data", "[", 
  RowBox[{"[", "3", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.5873839756487093`*^9, 3.58738397971955*^9}}],

Cell[BoxData[
 RowBox[{"data", "[", 
  RowBox[{"[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.58738398589774*^9, 3.58738399132692*^9}}],

Cell[BoxData[
 RowBox[{"data", "[", 
  RowBox[{"[", 
   RowBox[{"1", ";;", "5"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.5873839959434443`*^9, 3.587384004079344*^9}}],

Cell[BoxData[
 RowBox[{"data", "[", 
  RowBox[{"[", 
   RowBox[{"1", ";;", "5", ";;", "2"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.587384005407398*^9, 3.5873840097080307`*^9}}],

Cell[BoxData[
 RowBox[{"Clear", "[", "data", "]"}]], "Input",
 CellChangeTimes->{{3.587384356341115*^9, 3.587384358956766*^9}}],

Cell[TextData[{
 "Complete information about working with list can be found in the guide: ",
 ButtonBox["List Manipulation ",
  BaseStyle->"Link",
  ButtonData->"paclet:guide/ListManipulation"],
 "\[RightPointer]"
}], "Note",
 CellChangeTimes->{{3.587384087179615*^9, 3.587384139888303*^9}, {
  3.587384201085848*^9, 3.587384205045471*^9}}]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Programming", "Section",
 CellChangeTimes->{{3.585385829702592*^9, 3.5853858311817627`*^9}}],

Cell[CellGroupData[{

Cell["Assignments and Definitions", "Subsection",
 CellChangeTimes->{{3.585385925299632*^9, 3.585385927825942*^9}, {
  3.587384442313437*^9, 3.587384444438459*^9}}],

Cell["There are some basic mistakes that the beginners do...", "Text",
 CellChangeTimes->{{3.587384547300661*^9, 3.587384583569532*^9}, 
   3.5890129443152857`*^9}],

Cell[TextData[{
 "There is underscore missing and assignment (=) is used except delayed \
assignment (:=). This defines ",
 StyleBox["variable",
  FontSlant->"Italic"],
 " f[x] (x is part of the left hand side pattern) with value x^2. The left ",
 StyleBox["x",
  FontSlant->"Italic"],
 " and right ",
 StyleBox["x",
  FontSlant->"Italic"],
 " are two different things."
}], "Text",
 CellChangeTimes->{{3.587384612769403*^9, 3.587384722600266*^9}, 
   3.5873849312619867`*^9, 3.589012946394759*^9}],

Cell[BoxData[
 RowBox[{"Clear", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.587384942198647*^9, 3.5873849431706247`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x", "]"}], "=", 
  RowBox[{"x", "^", "2"}]}]], "Input",
 CellChangeTimes->{{3.587384584702939*^9, 3.5873845886820517`*^9}, 
   3.587384665705596*^9, 3.587384933288197*^9}],

Cell[TextData[{
 "The following expression doesn\[CloseCurlyQuote]t do the excepted \
calculation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["10", "2"], "=", "100"}], ")"}], "."}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.587384730812224*^9, 3.587384770645986*^9}}],

Cell[BoxData[
 RowBox[{"f", "[", "10", "]"}]], "Input",
 CellChangeTimes->{{3.587384598402253*^9, 3.587384599362688*^9}, 
   3.587384912424309*^9, 3.587384948038499*^9}],

Cell[TextData[{
 "If we take a look on the definition we can see, that the ",
 StyleBox["f",
  FontSlant->"Italic"],
 " is defined only for parameter ",
 StyleBox["x",
  FontSlant->"Italic"],
 " (symbol \[OpenCurlyDoubleQuote]x\[CloseCurlyDoubleQuote]) and whee this \
matches it is replaced by x^2."
}], "Text",
 CellChangeTimes->{{3.587384774587191*^9, 3.5873848250813227`*^9}, 
   3.589012947972864*^9}],

Cell[BoxData[
 RowBox[{"?", "f"}]], "Input",
 CellChangeTimes->{{3.587384826382564*^9, 3.587384827114637*^9}, 
   3.5873849147978277`*^9, 3.587384950727285*^9}],

Cell[BoxData[
 RowBox[{"f", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.5873848311804132`*^9, 3.587384831618614*^9}, 
   3.587384921407587*^9, 3.5873849529023247`*^9}],

Cell[TextData[{
 "If we assign value to ",
 StyleBox["x",
  FontSlant->"Italic"],
 ", the situation is even worse. The argument ",
 StyleBox["x",
  FontSlant->"Italic"],
 " is evaluated to value 10 and then f[10] is called."
}], "Text",
 CellChangeTimes->{{3.587384854874742*^9, 3.587384929045957*^9}}],

Cell[BoxData[
 RowBox[{"x", "=", "10"}]], "Input",
 CellChangeTimes->{{3.58738483357196*^9, 3.5873848345386887`*^9}}],

Cell[BoxData[
 RowBox[{"f", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.5873848398147793`*^9, 3.587384840241952*^9}, 
   3.5873849257955723`*^9, 3.587384956542993*^9}],

Cell[TextData[{
 "When we try to define another function ",
 StyleBox["g",
  FontSlant->"Italic"],
 " in the same way as ",
 StyleBox["f",
  FontSlant->"Italic"],
 ", the situation is different. The difference is in ",
 StyleBox["x",
  FontSlant->"Italic"],
 " which has assigned value."
}], "Text",
 CellChangeTimes->{{3.587384982908873*^9, 3.5873850590817213`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "[", "x", "]"}], "=", 
  RowBox[{"x", "^", "2"}]}]], "Input",
 CellChangeTimes->{{3.5873849693473263`*^9, 3.587384974454281*^9}}],

Cell[BoxData[
 RowBox[{"?", "g"}]], "Input",
 CellChangeTimes->{{3.587385061568658*^9, 3.587385062123418*^9}}],

Cell[BoxData[
 RowBox[{"g", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.587385065138218*^9, 3.5873850685389442`*^9}}],

Cell[BoxData[
 RowBox[{"g", "[", "y", "]"}]], "Input",
 CellChangeTimes->{{3.587385072560369*^9, 3.587385073147023*^9}}],

Cell[TextData[{
 "This is not how the functions should work. The correct way of defining the \
left hand side of the whole definition is to use so-called ",
 StyleBox["patterns. ",
  FontSlant->"Italic"],
 "The underscore _ represents exactly one element, two underscores __ \
represent one or more elements, and three underscores ___ represent any \
number of elements. We can give a name to the pattern adding the symbol \
(name) before the underscore(s)."
}], "Text",
 CellChangeTimes->{{3.587385088459248*^9, 3.5873852700346193`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"s", "[", "x_", "]"}], "=", 
  RowBox[{"x", "^", "2"}]}]], "Input",
 CellChangeTimes->{{3.5873852736436663`*^9, 3.587385288554953*^9}}],

Cell[BoxData[
 RowBox[{"?", "s"}]], "Input",
 CellChangeTimes->{{3.587385514806643*^9, 3.5873855149561*^9}}],

Cell["\<\
The last mistake is the usage of assignment (=) which evaluates the right \
hand side directly (before the definition is constructed). We should use \
delayed assignment (:=) which evaluates the right hand side when the \
definition is used.\
\>", "Text",
 CellChangeTimes->{{3.587385296796318*^9, 3.5873853482239637`*^9}, {
   3.587385455620376*^9, 3.587385503900008*^9}, 3.589012969546685*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"r", "[", "x_", "]"}], ":=", 
  RowBox[{"x", "^", "2"}]}]], "Input",
 CellChangeTimes->{{3.587385506354692*^9, 3.5873855098525257`*^9}}],

Cell[BoxData[
 RowBox[{"?", "r"}]], "Input",
 CellChangeTimes->{{3.5873855128132963`*^9, 3.587385519034906*^9}}],

Cell[BoxData[
 RowBox[{"r", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.5873855215472717`*^9, 3.587385522419842*^9}}],

Cell[BoxData[
 RowBox[{"r", "[", "10", "]"}]], "Input",
 CellChangeTimes->{{3.5873855249013577`*^9, 3.587385525675626*^9}}],

Cell[BoxData[
 RowBox[{"r", "[", "y", "]"}]], "Input",
 CellChangeTimes->{{3.587385526528438*^9, 3.5873855293228416`*^9}}],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"x", ",", "f", ",", "g", ",", "h", ",", "r", ",", "s"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.58738555073869*^9, 3.5873855759064407`*^9}, {
  3.587385743584476*^9, 3.587385743837071*^9}}],

Cell["Another example of delayed assignment:", "Text",
 CellChangeTimes->{{3.587385585426072*^9, 3.587385624438712*^9}, {
  3.5873856714133883`*^9, 3.5873856716691103`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"rand1", "=", 
   RowBox[{"RandomReal", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rand2", ":=", 
   RowBox[{"RandomReal", "[", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.587385601614626*^9, 3.58738563527457*^9}}],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{"rand1", ",", 
   RowBox[{"{", "5", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.587385638327157*^9, 3.587385647656124*^9}}],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{"rand2", ",", 
   RowBox[{"{", "5", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.587385649019771*^9, 3.587385653307637*^9}}],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"rand1", ",", "rand2"}], "]"}]], "Input",
 CellChangeTimes->{{3.5873857470221577`*^9, 3.587385751230562*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Procedural Programming", "Subsection",
 CellChangeTimes->{{3.58538593226613*^9, 3.585385935305764*^9}}],

Cell["\<\
Procedural programming means programming using loops, if-statements, and \
other functions that control the flow of execution through a program. For \
example, a compound expression (a sequence of statements separated by \
semicolons) is a procedural program. In a compound expression the flow of \
execution is to simply evaluate statements in the order given.\
\>", "Text",
 CellChangeTimes->{{3.588854311199574*^9, 3.588854313947434*^9}},
 CellTags->"Procedural Programming"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"gene", "=", 
   RowBox[{"GenomeData", "[", "\"\<MRPS29P2\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"chars", "=", 
   RowBox[{"Characters", "[", "gene", "]"}]}], ";"}], "\n", 
 RowBox[{"Tally", "[", "chars", "]"}]}], "Input",
 CellTags->"Procedural Programming"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"A\"\>", ",", "150"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"T\"\>", ",", "132"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"G\"\>", ",", "131"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"C\"\>", ",", "102"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.653642766993517*^9},
 CellTags->"Procedural Programming"]
}, Open  ]],

Cell[TextData[{
 "One of the most common procedural constructs is the if control structure. \
In ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", the ",
 Cell[BoxData[
  ButtonBox["If",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/If"]], "InlineFormula"],
 " function has the following syntax: ",
 Cell[BoxData[
  RowBox[{"If", "[", 
   RowBox[{
    StyleBox["test", "TI"], ",", 
    StyleBox["then", "TI"], ",", 
    StyleBox["else", "TI"]}], "]"}]], "Text",
  TextAlignment->-0.5]
}], "Text",
 CellChangeTimes->{{3.588854416616847*^9, 3.588854434912201*^9}},
 CellTags->"Procedural Programming"],

Cell[TextData[{
 "The following example demonstrates how the flow of execution depends on the \
result of the test ",
 Cell[BoxData[
  RowBox[{"x", ">", "\[Pi]"}]]],
 "."
}], "Text",
 CellChangeTimes->{{3.588854460948408*^9, 3.588854491255369*^9}},
 CellTags->"Procedural Programming"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"x", ">", "\[Pi]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Print", "[", 
     RowBox[{"x", ",", "\"\< is larger than \[Pi]\>\""}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Print", "[", 
     RowBox[{"x", ",", "\"\< is not larger than \[Pi]\>\""}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellTags->"Procedural Programming"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "E", "]"}]], "Input",
 CellTags->"Procedural Programming"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
  "\[ExponentialE]", 
   "\[InvisibleSpace]", "\<\" is not larger than \[Pi]\"\>"}],
  SequenceForm[E, " is not larger than \[Pi]"],
  Editable->False]], "Print",
 CellChangeTimes->{3.6536428272712383`*^9},
 CellTags->"Procedural Programming"]
}, Open  ]],

Cell["\<\
The basic elements of procedural programming are functions used for:\
\>", "Text",
 CellTags->"Procedural Programming"],

Cell[CellGroupData[{

Cell[TextData[{
 "evaluating a sequence of expressions (called a ",
 StyleBox["compound expression",
  FontSlant->"Italic"],
 "):"
}], "Item",
 CellTags->"Procedural Programming"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   SubscriptBox["expr", "1"], ";", 
   SubscriptBox["expr", "2"], ";", 
   SubscriptBox["expr", "3"], ";"}]]],
 "\[Ellipsis]"
}], "Subitem",
 CellDingbat->None,
 CellTags->"Procedural Programming"],

Cell["loops:", "Item",
 CellTags->"Procedural Programming"],

Cell[TextData[{
 Cell[BoxData[
  ButtonBox["Do",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Do"]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  ButtonBox["For",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/For"]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  ButtonBox["While",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/While"]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  ButtonBox["Table",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Table"]], "InlineFormula"],
 ", \[Ellipsis]"
}], "Subitem",
 CellDingbat->None,
 CellTags->"Procedural Programming"],

Cell["branching (or jumping), depending on a test or condition:", "Item",
 CellTags->"Procedural Programming"],

Cell[TextData[{
 Cell[BoxData[
  ButtonBox["If",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/If"]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  ButtonBox["Which",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Which"]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  ButtonBox["Switch",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Switch"]], "InlineFormula"]
}], "Subitem",
 CellDingbat->None,
 CellTags->"Procedural Programming"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example", "Subsubsection",
 CellChangeTimes->{{3.588854690913488*^9, 3.588854691792199*^9}, {
  3.653642979863944*^9, 3.653642988601008*^9}}],

Cell[TextData[{
 "Program that computes the sum of the integers 1 through ",
 StyleBox["n", "MR"],
 "."
}], "Text",
 CellChangeTimes->{{3.588854699614588*^9, 3.588854706733789*^9}},
 CellTags->"Procedural Programming"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", "10"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"result", "=", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Do", "[", 
   RowBox[{
    RowBox[{"result", "=", 
     RowBox[{"result", "+", "k"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"k", ",", "1", ",", "n"}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", "result"}], "Input",
 CellTags->"Procedural Programming"],

Cell[BoxData[
 RowBox[{"Clear", "[", "n", "]"}]], "Input",
 CellChangeTimes->{{3.588855841311054*^9, 3.588855842547414*^9}}],

Cell["\<\
By putting this program on the right side of an assignment, this program can \
become the definition of a function.\
\>", "Text",
 CellTags->"Procedural Programming"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "n_", "]"}], ":=", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"result", "=", "0"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Do", "[", 
     RowBox[{
      RowBox[{"result", "=", 
       RowBox[{"result", "+", "k"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"k", ",", "1", ",", "n"}], "}"}]}], "]"}], ";", 
    "\[IndentingNewLine]", "result"}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 CellTags->"Procedural Programming"],

Cell[TextData[{
 "You \[OpenCurlyDoubleQuote]run\[CloseCurlyDoubleQuote] this program by \
evaluating an expression that matches ",
 Cell[BoxData[
  RowBox[{"f", "[", "n_", "]"}]]],
 "."
}], "Text",
 CellTags->"Procedural Programming"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "10", "]"}]], "Input",
 CellTags->"Procedural Programming"],

Cell[BoxData["55"], "Output",
 CellChangeTimes->{3.653643187934367*^9},
 CellTags->"Procedural Programming"]
}, Open  ]],

Cell["\<\
Our function expects a positive integer as the argument. It can give \
incorrect or unexpected results if the argument is not a positive integer.\
\>", "Text",
 CellChangeTimes->{{3.5888548133064404`*^9, 3.5888548867118187`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"-", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.588854784947938*^9, 3.588854793100175*^9}}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.653643190100708*^9}]
}, Open  ]],

Cell[TextData[{
 "Here is a modification of this program, which checks that ",
 StyleBox["n", "MR"],
 " is a positive integer before doing the calculation."
}], "Text",
 CellTags->"Procedural Programming"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "n_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"IntegerQ", "[", "n", "]"}], "&&", 
     RowBox[{"n", ">", "0"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"result", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"result", "=", 
        RowBox[{"result", "+", "k"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"k", ",", "1", ",", "n"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "result"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Print", "[", 
     RowBox[{"n", ",", " ", "\"\< is not a positive integer.\>\""}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellTags->"Procedural Programming"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "Pi", "]"}]], "Input",
 CellTags->"Procedural Programming"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
  "\[Pi]", "\[InvisibleSpace]", "\<\" is not a positive integer.\"\>"}],
  SequenceForm[Pi, " is not a positive integer."],
  Editable->False]], "Print",
 CellChangeTimes->{3.6536432701526318`*^9},
 CellTags->"Procedural Programming"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"-", "9"}], "]"}]], "Input",
 CellChangeTimes->{{3.5888549757835283`*^9, 3.588854977078669*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   RowBox[{"-", "9"}], 
   "\[InvisibleSpace]", "\<\" is not a positive integer.\"\>"}],
  SequenceForm[-9, " is not a positive integer."],
  Editable->False]], "Print",
 CellChangeTimes->{3.653643277817161*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "9", "]"}]], "Input",
 CellTags->"Procedural Programming"],

Cell[BoxData["45"], "Output",
 CellChangeTimes->{3.6536432798464518`*^9},
 CellTags->"Procedural Programming"]
}, Open  ]],

Cell[TextData[{
 "When assignments to temporary variables are used for keeping track of \
intermediate results, it is common practice, especially in larger programs, \
to ",
 StyleBox["localize",
  FontSlant->"Italic"],
 " those variables to avoid conflicts with other parts of the program."
}], "Text",
 CellChangeTimes->{{3.588855566786463*^9, 3.5888555674369373`*^9}, 
   3.5888556135427227`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", "100"}]], "Input",
 CellChangeTimes->{{3.5888556157716846`*^9, 3.588855624242872*^9}}],

Cell[BoxData["100"], "Output",
 CellChangeTimes->{3.653643380093835*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "10", "]"}]], "Input",
 CellChangeTimes->{{3.58885562691368*^9, 3.588855628272915*^9}}],

Cell[BoxData["55"], "Output",
 CellChangeTimes->{3.653643381744501*^9}]
}, Open  ]],

Cell[TextData[{
 "The original value of ",
 StyleBox["result", "MR"],
 " is lost:"
}], "Text",
 CellChangeTimes->{{3.5888556387903137`*^9, 3.588855691164442*^9}, {
  3.5888557213476686`*^9, 3.58885572920335*^9}, {3.588855799914123*^9, 
  3.588855801322403*^9}}],

Cell[CellGroupData[{

Cell[BoxData["result"], "Input",
 CellChangeTimes->{{3.5888556297525873`*^9, 3.58885563108946*^9}}],

Cell[BoxData["55"], "Output",
 CellChangeTimes->{3.6536433840317373`*^9}]
}, Open  ]],

Cell[TextData[{
 "Variables can be localized using the ",
 Cell[BoxData[
  ButtonBox["Module",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Module"]], "InlineFormula"],
 " function. The first argument in ",
 Cell[BoxData[
  ButtonBox["Module",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Module"]], "InlineFormula"],
 " is a list of variables to localize, and the second argument is the \
expression to evaluate."
}], "Text",
 CellTags->"Procedural Programming"],

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    StyleBox["vars", "TI"], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    StyleBox["body_of", "TI"], 
    StyleBox[" ", "TI"], 
    StyleBox["_function", "TI"], "\[IndentingNewLine]", "\[Ellipsis]"}]}], 
  "]"}]], "DisplayFormula"],

Cell[TextData[{
 "Here is a definition in which the variable ",
 StyleBox["result", "MR"],
 " is localized using ",
 Cell[BoxData[
  ButtonBox["Module",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Module"]], "InlineFormula"],
 "."
}], "Text",
 CellTags->"Procedural Programming"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "n_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "result", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"result", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"result", "=", 
        RowBox[{"result", "+", "k"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"k", ",", "1", ",", "n"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "result"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellTags->"Procedural Programming"],

Cell[TextData[{
 "With this definition, evaluation of ",
 StyleBox["f", "MR"],
 " will leave existing values of ",
 StyleBox["result", "MR"],
 " unchanged."
}], "Text",
 CellTags->"Procedural Programming"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", "100"}]], "Input",
 CellChangeTimes->{{3.588855805633356*^9, 3.588855806641214*^9}},
 CellTags->"Procedural Programming"],

Cell[BoxData["100"], "Output",
 CellChangeTimes->{3.6536434449760923`*^9},
 CellTags->"Procedural Programming"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "10", "]"}]], "Input",
 CellChangeTimes->{{3.588855808945722*^9, 3.588855810210559*^9}},
 CellTags->"Procedural Programming"],

Cell[BoxData["55"], "Output",
 CellChangeTimes->{3.6536435179852457`*^9},
 CellTags->"Procedural Programming"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.653643505971491*^9, 3.6536435226290417`*^9}, {
  3.653643606241888*^9, 3.6536436111188707`*^9}},
 CellTags->"Procedural Programming"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.653643613263342*^9, 3.653643613266844*^9}},
 CellTags->"Procedural Programming"],

Cell[CellGroupData[{

Cell[BoxData["result"], "Input",
 CellTags->"Procedural Programming"],

Cell[BoxData["100"], "Output",
 CellChangeTimes->{3.653643448864966*^9},
 CellTags->"Procedural Programming"]
}, Open  ]],

Cell[TextData[{
 "Variables that have not been localized are called ",
 StyleBox["global",
  FontSlant->"Italic"],
 " variables."
}], "Text",
 CellTags->"Procedural Programming"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"f", ",", "result"}], "]"}]], "Input",
 CellChangeTimes->{{3.588855828492444*^9, 3.588855829871855*^9}},
 CellTags->"Procedural Programming"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Functional Programming", "Subsection",
 CellChangeTimes->{{3.585385937857851*^9, 3.585385940865554*^9}, {
  3.653643648478301*^9, 3.653643649040765*^9}}],

Cell[TextData[ButtonBox["Functional programing guide",
 BaseStyle->"Link",
 ButtonData->"paclet:guide/FunctionalProgramming"]], "Text",
 CellChangeTimes->{{3.5888591425708857`*^9, 3.588859164784287*^9}}],

Cell["\<\
... programming using functions as the arguments of other functions. In this \
paradigm, computation is viewed as the evaluation of functions.\
\>", "Text",
 CellChangeTimes->{{3.588856507318736*^9, 3.588856515314622*^9}}],

Cell[BoxData[
 RowBox[{"Tally", "[", 
  RowBox[{"Characters", "[", 
   RowBox[{"GenomeData", "[", "\"\<MRPS29P2\>\"", "]"}], "]"}], 
  "]"}]], "Input",
 CellTags->"Functional Programming"],

Cell[TextData[{
 "Consider the task of computing the future value of a principal amount using \
the formula for compound interest (",
 ButtonBox["http://en.wikipedia.org/wiki/Compound_interest",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikipedia.org/wiki/Compound_interest"], None},
  ButtonNote->"http://en.wikipedia.org/wiki/Compound_interest"],
 "). As a concrete example, consider an interest rate of 3% compounded \
monthly."
}], "Text",
 CellChangeTimes->{{3.5888586953445883`*^9, 3.588858752801804*^9}, {
  3.588858853482073*^9, 3.5888588561938543`*^9}},
 CellTags->"Functional Programming"],

Cell[BoxData[
 RowBox[{
  RowBox[{"value", "[", "p_", "]"}], ":=", 
  RowBox[{"p", 
   RowBox[{"(", 
    RowBox[{"1", "+", 
     FractionBox["3", 
      RowBox[{"100", " ", "12"}]]}], ")"}]}]}]], "Input",
 CellChangeTimes->{{3.588858860924727*^9, 3.588858874939066*^9}},
 CellTags->"Functional Programming"],

Cell["\<\
 If you start with $1000, this gives the value of your account after one \
month.\
\>", "Text",
 CellChangeTimes->{{3.588858754816331*^9, 3.58885875669588*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"value", "[", "1000.", "]"}]], "Input",
 CellChangeTimes->{
  3.5888588844913692`*^9, {3.65364369644407*^9, 3.653643710056073*^9}},
 CellTags->"Functional Programming"],

Cell[BoxData["1002.5`"], "Output",
 CellChangeTimes->{3.653643716344499*^9},
 CellTags->"Functional Programming"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.653643712267651*^9, 3.6536437143480053`*^9}},
 CellTags->"Functional Programming"],

Cell["Here is the value after two months.", "Text",
 CellTags->"Functional Programming"],

Cell[BoxData[
 RowBox[{"value", "[", 
  RowBox[{"value", "[", "1000.", "]"}], "]"}]], "Input",
 CellChangeTimes->{3.588858886979629*^9},
 CellTags->"Functional Programming"],

Cell["And after three months...", "Text",
 CellChangeTimes->{{3.588858776132228*^9, 3.5888587767968807`*^9}},
 CellTags->"Functional Programming"],

Cell[BoxData[
 RowBox[{"value", "[", 
  RowBox[{"value", "[", 
   RowBox[{"value", "[", "1000.", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{3.5888588893304768`*^9},
 CellTags->"Functional Programming"],

Cell[TextData[{
 "The ",
 Cell[BoxData[
  ButtonBox["Nest",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Nest"]], "InlineFormula"],
 " function is used to iterate functions."
}], "Text",
 CellChangeTimes->{
  3.5888587952357492`*^9, {3.653643732309989*^9, 3.653643738071*^9}},
 CellTags->"Functional Programming"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "f", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Nest", "[", 
  RowBox[{"f", ",", 
   SubscriptBox["x", "0"], ",", "5"}], "]"}]}], "Input",
 CellChangeTimes->{{3.5888588000934143`*^9, 3.588858800949668*^9}, {
  3.6536437427518787`*^9, 3.653643755340846*^9}},
 CellTags->"Functional Programming"],

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"f", "[", 
   RowBox[{"f", "[", 
    RowBox[{"f", "[", 
     RowBox[{"f", "[", 
      SubscriptBox["x", "0"], "]"}], "]"}], "]"}], "]"}], "]"}]], "Output",
 CellChangeTimes->{{3.653643758115039*^9, 3.653643763087408*^9}},
 CellTags->"Functional Programming"]
}, Open  ]],

Cell[TextData[{
 "Future value in our example can be simply done using the function ",
 Cell[BoxData[
  ButtonBox["Nest",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Nest"]], "InlineFormula"],
 "."
}], "Text",
 CellChangeTimes->{{3.5888588128194513`*^9, 3.5888588322667093`*^9}},
 CellTags->"Functional Programming"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Nest", "[", 
  RowBox[{"value", ",", "1000.", ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.5888588954590816`*^9, 3.588858896529772*^9}},
 CellTags->"Functional Programming"],

Cell[BoxData["1007.5187656249999`"], "Output",
 CellChangeTimes->{3.653643815174111*^9},
 CellTags->"Functional Programming"]
}, Open  ]],

Cell["Here are all the intermediate values.", "Text",
 CellChangeTimes->{3.588859038796913*^9},
 CellTags->"Functional Programming"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NestList", "[", 
  RowBox[{"value", ",", "1000.", ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.588859040997161*^9, 3.588859043613367*^9}},
 CellTags->"Functional Programming"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1000.`", ",", "1002.5`", ",", "1005.0062499999999`", ",", 
   "1007.5187656249999`"}], "}"}]], "Output",
 CellChangeTimes->{3.653643816884924*^9},
 CellTags->"Functional Programming"]
}, Open  ]],

Cell["... and for the first 12 months.", "Text",
 CellChangeTimes->{{3.588859051355299*^9, 3.588859052947212*^9}},
 CellTags->"Functional Programming"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NestList", "[", 
  RowBox[{"value", ",", "1000.", ",", "12"}], "]"}]], "Input",
 CellChangeTimes->{3.588859057020289*^9},
 CellTags->"Functional Programming"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1000.`", ",", "1002.5`", ",", "1005.0062499999999`", ",", 
   "1007.5187656249999`", ",", "1010.0375625390624`", ",", 
   "1012.56265644541`", ",", "1015.0940630865234`", ",", 
   "1017.6317982442397`", ",", "1020.1758777398502`", ",", 
   "1022.7263174341998`", ",", "1025.2831332277854`", ",", 
   "1027.8463410608547`", ",", "1030.4159569135068`"}], "}"}]], "Output",
 CellChangeTimes->{3.653643819192164*^9},
 CellTags->"Functional Programming"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Map", "Subsubsection",
 CellChangeTimes->{{3.5888592347921133`*^9, 3.588859236149391*^9}}],

Cell["The basic behavior of Map:", "Text",
 CellChangeTimes->{{3.588859241020987*^9, 3.588859249028496*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.588859251911941*^9, 3.58885929064467*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", "1", "]"}], ",", 
   RowBox[{"f", "[", "2", "]"}], ",", 
   RowBox[{"f", "[", "3", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.653643950088661*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", 
   RowBox[{"List", "[", 
    RowBox[{"1", ",", "2", ",", "3"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.588859284007989*^9, 3.588859296524386*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", "1", "]"}], ",", 
   RowBox[{"f", "[", "2", "]"}], ",", 
   RowBox[{"f", "[", "3", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.653643955307268*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", 
   RowBox[{"g", "[", 
    RowBox[{"1", ",", "2", ",", "3"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.588859297623958*^9, 3.588859301452463*^9}}],

Cell[BoxData[
 RowBox[{"g", "[", 
  RowBox[{
   RowBox[{"f", "[", "1", "]"}], ",", 
   RowBox[{"f", "[", "2", "]"}], ",", 
   RowBox[{"f", "[", "3", "]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.653644001895976*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", 
   RowBox[{"a", "+", "b", "+", "c"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.588859305660594*^9, 3.588859315964005*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "a", "]"}], "+", 
  RowBox[{"f", "[", "b", "]"}], "+", 
  RowBox[{"f", "[", "c", "]"}]}]], "Output",
 CellChangeTimes->{3.6536440427628098`*^9}]
}, Open  ]],

Cell["Data filtering example: replace all small values by zero.", "Text",
 CellChangeTimes->{{3.588859350627055*^9, 3.588859371617161*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3.14", ",", "0.5", ",", "0.1", ",", 
     RowBox[{"-", "0.9"}], ",", 
     RowBox[{"-", "2"}], ",", "0"}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5888593756653233`*^9, 3.58885940098534*^9}, {
  3.588859481798749*^9, 3.588859487887245*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Abs", "[", "x", "]"}], "<", "1"}], ",", "0", ",", "x"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.5888594450572233`*^9, 3.588859460391366*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "0.5", "]"}]], "Input",
 CellChangeTimes->{{3.588859466973755*^9, 3.588859468310487*^9}}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{{3.653644067732884*^9, 3.653644079961815*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "1.5", "]"}]], "Input",
 CellChangeTimes->{{3.5888594697797956`*^9, 3.588859472238654*^9}}],

Cell[BoxData["1.5`"], "Output",
 CellChangeTimes->{{3.653644070592334*^9, 3.6536440811612797`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ParallelMap", "[", 
  RowBox[{"f", ",", "data"}], "]"}]], "Input",
 CellChangeTimes->{{3.588859474180093*^9, 3.588859476127391*^9}, {
  3.6536442302836943`*^9, 3.6536442385782633`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3.14`", ",", "0", ",", "0", ",", "0", ",", 
   RowBox[{"-", "2"}], ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{{3.653644082850415*^9, 3.6536441126802464`*^9}, {
  3.653644235186751*^9, 3.653644247156159*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"data", ",", "f"}], "]"}]], "Input",
 CellChangeTimes->{{3.5888596388828382`*^9, 3.5888596410668097`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Expressions", "Subsubsection",
 CellChangeTimes->{{3.588859704399395*^9, 3.588859706973219*^9}}],

Cell[TextData[{
 "The head of an atomic expression is simply the type of object that it is. \
The ",
 Cell[BoxData[
  ButtonBox["FullForm",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/FullForm"]], "InlineFormula"],
 " of an atomic expression is simply that expression."
}], "Text",
 CellTags->"Functional Programming"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Head", "[", "42", "]"}], ",", 
   RowBox[{"FullForm", "[", "42", "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.588859982805749*^9, 3.588859986117076*^9}},
 CellTags->"Functional Programming"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Integer", ",", 
   TagBox[
    StyleBox["42",
     ShowSpecialCharacters->False,
     ShowStringCharacters->True,
     NumberMarks->True],
    FullForm]}], "}"}]], "Output",
 CellChangeTimes->{3.653644290786955*^9},
 CellTags->"Functional Programming"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Head", "[", "x", "]"}], ",", 
   RowBox[{"FullForm", "[", "x", "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.588859988853271*^9, 3.58885999265352*^9}, {
  3.65364435909827*^9, 3.6536443671956263`*^9}},
 CellTags->"Functional Programming"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Symbol", ",", 
   TagBox[
    StyleBox["x",
     ShowSpecialCharacters->False,
     ShowStringCharacters->True,
     NumberMarks->True],
    FullForm]}], "}"}]], "Output",
 CellChangeTimes->{
  3.653644295841672*^9, {3.653644362998467*^9, 3.653644367688136*^9}},
 CellTags->"Functional Programming"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Head", "[", "\"\<Hello\>\"", "]"}], ",", 
   RowBox[{"FullForm", "[", "\"\<Hello\>\"", "]"}]}], "}"}]], "Input",
 CellTags->"Functional Programming"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"String", ",", 
   TagBox[
    StyleBox["\"\<Hello\>\"",
     ShowSpecialCharacters->False,
     ShowStringCharacters->True,
     NumberMarks->True],
    FullForm]}], "}"}]], "Output",
 CellChangeTimes->{3.653644297805368*^9},
 CellTags->"Functional Programming"]
}, Open  ]],

Cell[TextData[{
 "Compound expressions are built up from atomic expressions, they have a ",
 StyleBox["head",
  FontSlant->"Italic"],
 " and zero or more ",
 StyleBox["elements",
  FontSlant->"Italic"],
 ". Compound expressions are usually called ",
 StyleBox["normal expressions",
  FontSlant->"Italic"],
 ". All normal expressions are of the following form:"
}], "Text",
 CellChangeTimes->{{3.588860042739895*^9, 3.5888600671453238`*^9}, {
  3.588860115643263*^9, 3.588860119527521*^9}},
 CellTags->"Functional Programming"],

Cell[BoxData[
 RowBox[{
  StyleBox["h", "TI"], "[", 
  RowBox[{
   SubscriptBox[
    StyleBox["e", "TI"], 
    StyleBox["1", "TR"]], ",", 
   SubscriptBox[
    StyleBox["e", "TI"], 
    StyleBox["2", "TR"]], ",", "\[Ellipsis]", ",", 
   SubscriptBox[
    StyleBox["e", "TI"], 
    StyleBox["n", "TI"]]}], "]"}]], "DisplayFormula"],

Cell[TextData[{
 "The ",
 StyleBox["h",
  FontSlant->"Italic"],
 " is called the ",
 StyleBox["head",
  FontSlant->"Italic"],
 " of the expression and the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["e", "i"], TraditionalForm]]],
 " are the ",
 StyleBox["elements",
  FontSlant->"Italic"],
 ". Both the head and the elements of a normal expression can be either \
atomic expressions or normal expressions themselves."
}], "Text",
 CellTags->"Functional Programming"],

Cell[TextData[{
 "For example, the expression ",
 Cell[BoxData[
  RowBox[{"f", "[", 
   RowBox[{"a", ",", "b", ",", "c"}], "]"}]]],
 " is a normal expression with head ",
 StyleBox["f", "MR"],
 " and with three (atomic) elements. The ",
 Cell[BoxData[
  ButtonBox["Head",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Head"]], "InlineFormula"],
 " function returns the head of its argument."
}], "Text",
 CellTags->"Functional Programming"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"a", ",", "b", ",", "c"}], "]"}], "//", "Head"}]], "Input",
 CellTags->"Functional Programming"],

Cell[BoxData["f"], "Output",
 CellChangeTimes->{3.653644383953141*^9},
 CellTags->"Functional Programming"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"a", ",", "b", ",", "c"}], "]"}], "//", "Length"}]], "Input",
 CellTags->"Functional Programming"],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{3.653644385471119*^9},
 CellTags->"Functional Programming"]
}, Open  ]],

Cell[TextData[{
 "With ",
 Cell[BoxData[
  ButtonBox["Part",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Part"]], "InlineFormula"],
 ", you can extract any elements."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"a", ",", "b", ",", "c"}], "]"}], ",", "2"}], "]"}]], "Input"],

Cell[BoxData["b"], "Output",
 CellChangeTimes->{3.653644504175769*^9}]
}, Open  ]],

Cell["Example: Nested list of lists, a matrix.", "Text",
 CellChangeTimes->{{3.58886020049301*^9, 3.58886020297255*^9}},
 CellTags->"Functional Programming"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mat", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "b"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"d", ",", "e"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"g", ",", "h"}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{3.5888602207336597`*^9},
 CellTags->"Functional Programming"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "e"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"g", ",", "h"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.653644508168537*^9},
 CellTags->"Functional Programming"]
}, Open  ]],

Cell[TextData[{
 "The ",
 Cell[BoxData[
  ButtonBox["FullForm",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/FullForm"]], "InlineFormula"],
 " or ",
 Cell[BoxData[
  ButtonBox["TreeForm",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/TreeForm"]]],
 " of ",
 StyleBox["mat", "MR"],
 " shows its structure."
}], "Text",
 CellTags->"Functional Programming"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullForm", "[", "mat", "]"}]], "Input",
 CellChangeTimes->{3.6536446573740797`*^9},
 CellTags->"Functional Programming"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"List", "[", 
    RowBox[{
     RowBox[{"List", "[", 
      RowBox[{"a", ",", "b"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"d", ",", "e"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"g", ",", "h"}], "]"}]}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellChangeTimes->{3.653644660818149*^9},
 CellTags->"Functional Programming"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TreeForm", "[", "mat", "]"}]], "Input",
 CellTags->"Functional Programming"],

Cell[BoxData[
 GraphicsBox[
  TagBox[GraphicsComplexBox[{{1.7437145811572892`, 1.3949716649258315`}, {
    0.34874291623145787`, 0.6974858324629157}, {0., 0.}, {0.6974858324629157, 
    0.}, {1.7437145811572892`, 0.6974858324629157}, {1.3949716649258315`, 
    0.}, {2.092457497388747, 0.}, {3.1386862460831204`, 0.6974858324629157}, {
    2.789943329851663, 0.}, {3.4874291623145783`, 0.}}, {
     {RGBColor[0.55, 0.45, 0.45], 
      LineBox[{{1, 2}, {1, 5}, {1, 8}, {2, 3}, {2, 4}, {5, 6}, {5, 7}, {8, 
       9}, {8, 10}}]}, {
      TagBox[
       TooltipBox[InsetBox[
         FrameBox[
          StyleBox["List", "StandardForm", "Output",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->Scaled[0.05],
           FontColor->GrayLevel[0]],
          Background->RGBColor[1., 1., 0.871],
          FrameStyle->GrayLevel[0.5],
          StripOnInput->False], 1],
        TagBox[
         RowBox[{"{", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{"a", ",", "b"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"d", ",", "e"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"g", ",", "h"}], "}"}]}], "}"}], HoldForm]],
       Annotation[#, 
        HoldForm[{{$CellContext`a, $CellContext`b}, {$CellContext`d, \
$CellContext`e}, {$CellContext`g, $CellContext`h}}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[InsetBox[
         FrameBox[
          StyleBox["List", "StandardForm", "Output",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->Scaled[0.05],
           FontColor->GrayLevel[0]],
          Background->RGBColor[1., 1., 0.871],
          FrameStyle->GrayLevel[0.5],
          StripOnInput->False], 2],
        TagBox[
         RowBox[{"{", 
           RowBox[{"a", ",", "b"}], "}"}], HoldForm]],
       Annotation[#, 
        HoldForm[{$CellContext`a, $CellContext`b}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[InsetBox[
         FrameBox[
          StyleBox[
           TagBox["a",
            HoldForm], "StandardForm", "Output",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->Scaled[0.05],
           FontColor->GrayLevel[0]],
          Background->RGBColor[1., 1., 0.871],
          FrameStyle->GrayLevel[0.5],
          StripOnInput->False], 3],
        TagBox["a", HoldForm]],
       Annotation[#, 
        HoldForm[$CellContext`a], "Tooltip"]& ], 
      TagBox[
       TooltipBox[InsetBox[
         FrameBox[
          StyleBox[
           TagBox["b",
            HoldForm], "StandardForm", "Output",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->Scaled[0.05],
           FontColor->GrayLevel[0]],
          Background->RGBColor[1., 1., 0.871],
          FrameStyle->GrayLevel[0.5],
          StripOnInput->False], 4],
        TagBox["b", HoldForm]],
       Annotation[#, 
        HoldForm[$CellContext`b], "Tooltip"]& ], 
      TagBox[
       TooltipBox[InsetBox[
         FrameBox[
          StyleBox["List", "StandardForm", "Output",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->Scaled[0.05],
           FontColor->GrayLevel[0]],
          Background->RGBColor[1., 1., 0.871],
          FrameStyle->GrayLevel[0.5],
          StripOnInput->False], 5],
        TagBox[
         RowBox[{"{", 
           RowBox[{"d", ",", "e"}], "}"}], HoldForm]],
       Annotation[#, 
        HoldForm[{$CellContext`d, $CellContext`e}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[InsetBox[
         FrameBox[
          StyleBox[
           TagBox["d",
            HoldForm], "StandardForm", "Output",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->Scaled[0.05],
           FontColor->GrayLevel[0]],
          Background->RGBColor[1., 1., 0.871],
          FrameStyle->GrayLevel[0.5],
          StripOnInput->False], 6],
        TagBox["d", HoldForm]],
       Annotation[#, 
        HoldForm[$CellContext`d], "Tooltip"]& ], 
      TagBox[
       TooltipBox[InsetBox[
         FrameBox[
          StyleBox[
           TagBox["e",
            HoldForm], "StandardForm", "Output",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->Scaled[0.05],
           FontColor->GrayLevel[0]],
          Background->RGBColor[1., 1., 0.871],
          FrameStyle->GrayLevel[0.5],
          StripOnInput->False], 7],
        TagBox["e", HoldForm]],
       Annotation[#, 
        HoldForm[$CellContext`e], "Tooltip"]& ], 
      TagBox[
       TooltipBox[InsetBox[
         FrameBox[
          StyleBox["List", "StandardForm", "Output",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->Scaled[0.05],
           FontColor->GrayLevel[0]],
          Background->RGBColor[1., 1., 0.871],
          FrameStyle->GrayLevel[0.5],
          StripOnInput->False], 8],
        TagBox[
         RowBox[{"{", 
           RowBox[{"g", ",", "h"}], "}"}], HoldForm]],
       Annotation[#, 
        HoldForm[{$CellContext`g, $CellContext`h}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[InsetBox[
         FrameBox[
          StyleBox[
           TagBox["g",
            HoldForm], "StandardForm", "Output",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->Scaled[0.05],
           FontColor->GrayLevel[0]],
          Background->RGBColor[1., 1., 0.871],
          FrameStyle->GrayLevel[0.5],
          StripOnInput->False], 9],
        TagBox["g", HoldForm]],
       Annotation[#, 
        HoldForm[$CellContext`g], "Tooltip"]& ], 
      TagBox[
       TooltipBox[InsetBox[
         FrameBox[
          StyleBox[
           TagBox["h",
            HoldForm], "StandardForm", "Output",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->Scaled[0.05],
           FontColor->GrayLevel[0]],
          Background->RGBColor[1., 1., 0.871],
          FrameStyle->GrayLevel[0.5],
          StripOnInput->False], 10],
        TagBox["h", HoldForm]],
       Annotation[#, 
        HoldForm[$CellContext`h], "Tooltip"]& ]}}],
   Annotation[#, 
    VertexCoordinateRules -> {{1.7437145811572892`, 1.3949716649258315`}, {
     0.34874291623145787`, 0.6974858324629157}, {0., 0.}, {0.6974858324629157,
      0.}, {1.7437145811572892`, 0.6974858324629157}, {1.3949716649258315`, 
     0.}, {2.092457497388747, 0.}, {3.1386862460831204`, 
     0.6974858324629157}, {2.789943329851663, 0.}, {3.4874291623145783`, 
     0.}}]& ],
  AspectRatio->NCache[2^Rational[-1, 2], 0.7071067811865475],
  FrameTicks->Automatic,
  PlotRange->All,
  PlotRangePadding->Scaled[0.1]]], "Output",
 CellChangeTimes->{3.653644752860126*^9},
 CellTags->"Functional Programming"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "[", "mat", "]"}]], "Input",
 CellTags->"Functional Programming"],

Cell[BoxData["List"], "Output",
 CellChangeTimes->{3.6536447556307898`*^9},
 CellTags->"Functional Programming"]
}, Open  ]],

Cell[TextData[{
 "Each of the elements of ",
 StyleBox["mat", "MR"],
 " is a list of length 2; there are three of them."
}], "Text",
 CellTags->"Functional Programming"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "mat", "]"}]], "Input",
 CellTags->"Functional Programming"],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{3.6536447589849*^9},
 CellTags->"Functional Programming"]
}, Open  ]],

Cell["Extract elements of the expression.", "Text",
 CellChangeTimes->{{3.588860243220765*^9, 3.5888602446748323`*^9}}],

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{"mat", ",", "2"}], "]"}]], "Input"],

Cell["More complicated example.", "Text",
 CellChangeTimes->{{3.588860281726322*^9, 3.588860293139557*^9}}],

Cell[BoxData[
 RowBox[{"expr", "=", 
  RowBox[{
   SuperscriptBox["a", 
    RowBox[{"(", 
     RowBox[{"c", "+", "1"}], ")"}]], "+", 
   RowBox[{"10", "a", " ", "b"}], "+", 
   SuperscriptBox["b", "3"]}]}]], "Input",
 CellChangeTimes->{{3.588860299657125*^9, 3.588860318290002*^9}, {
  3.588860359482113*^9, 3.5888604114234753`*^9}}],

Cell[BoxData[
 RowBox[{"TreeForm", "[", "expr", "]"}]], "Input",
 CellChangeTimes->{{3.588860319748369*^9, 3.588860324010293*^9}, {
  3.588860377784202*^9, 3.588860379256742*^9}}],

Cell[BoxData[
 RowBox[{"expr", "[", 
  RowBox[{"[", "2", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.588860425800811*^9, 3.58886043718233*^9}}],

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{"expr", ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.588860429669796*^9, 3.5888604394942083`*^9}}],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"expr", ",", "mat"}], "]"}]], "Input",
 CellChangeTimes->{{3.588860543212036*^9, 3.588860567785368*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Apply", "Subsubsection",
 CellChangeTimes->{{3.5888605826041594`*^9, 3.588860583279953*^9}}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"Apply", "[", 
   RowBox[{
    StyleBox["f", "TI"], ",", 
    StyleBox["expr", "TI"]}], "]"}]]],
 " replaces the head of ",
 StyleBox["expr", "IT"],
 " with ",
 StyleBox["f", "IT"],
 "."
}], "Text",
 CellTags->"Functional Programming"],

Cell[TextData[{
 "Basically, think of using ",
 Cell[BoxData[
  ButtonBox["Map",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Map"]], "InlineFormula"],
 " when you want to operate on the elements of an expression; use ",
 Cell[BoxData[
  ButtonBox["Apply",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Apply"]], "InlineFormula"],
 " when you want to change the structure of the expression."
}], "Text"],

Cell[TextData[{
 "Basic behavior of ",
 Cell[BoxData[
  ButtonBox["Apply",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Apply"]], "InlineFormula"],
 ":"
}], "Text",
 CellChangeTimes->{{3.588860629166974*^9, 3.588860630966174*^9}},
 CellTags->"Functional Programming"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"f", ",", 
   RowBox[{"g", "[", 
    RowBox[{"1", ",", "2", ",", "3"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.588860634279442*^9, 3.588860636374864*^9}},
 CellTags->"Functional Programming"],

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"1", ",", "2", ",", "3"}], "]"}]], "Output",
 CellChangeTimes->{3.653644819413546*^9},
 CellTags->"Functional Programming"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"Times", ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.588860757247457*^9, 3.5888607580673943`*^9}},
 CellTags->"Functional Programming"],

Cell[BoxData[
 RowBox[{"a", " ", "b", " ", "c"}]], "Output",
 CellChangeTimes->{3.653644852060755*^9},
 CellTags->"Functional Programming"]
}, Open  ]],

Cell["Using this approach, here is how you might compute 10!", "Text",
 CellChangeTimes->{3.588860764921564*^9},
 CellTags->"Functional Programming"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"Times", ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8",
      ",", "9", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellTags->"Functional Programming"],

Cell[BoxData["3628800"], "Output",
 CellChangeTimes->{3.6536448622063217`*^9},
 CellTags->"Functional Programming"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"Times", ",", 
   RowBox[{"Range", "[", "10", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.588860780411075*^9, 3.588860782349305*^9}}],

Cell[BoxData["3628800"], "Output",
 CellChangeTimes->{3.6536448731765537`*^9}]
}, Open  ]],

Cell["Functional approach to adding up the first 10 integers.", "Text",
 CellChangeTimes->{{3.5888608018566637`*^9, 3.5888608069870996`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"Plus", ",", 
   RowBox[{"Range", "[", "10", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.588860780411075*^9, 3.588860782349305*^9}, {
  3.588860818916483*^9, 3.5888608194987383`*^9}}],

Cell[BoxData["55"], "Output",
 CellChangeTimes->{3.653644876169485*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Total", "[", 
  RowBox[{"Range", "[", "10", "]"}], "]"}]], "Input"],

Cell[BoxData["55"], "Output",
 CellChangeTimes->{3.6536448782608747`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example", "Subsubsection",
 CellChangeTimes->{{3.588860959741312*^9, 3.588860960595541*^9}}],

Cell["Finding the largest element in each row of the matrix.", "Text",
 CellChangeTimes->{{3.5888609698327017`*^9, 3.588860989233903*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"mat", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "3", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "9", ",", "5"}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.588860990139298*^9, 3.588861017087008*^9}, {
  3.588861103225523*^9, 3.588861104599811*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", "mat", "]"}]], "Input",
 CellChangeTimes->{{3.588861018663677*^9, 3.5888610219564743`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "2", "3"},
     {"4", "3", "2"},
     {"1", "9", "5"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.653644967382468*^9}]
}, Open  ]],

Cell["Procedural program:", "Text",
 CellChangeTimes->{{3.588861026869219*^9, 3.5888610474399967`*^9}, {
  3.5888611063995523`*^9, 3.588861107398279*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Do", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"result", "=", 
     RowBox[{"Append", "[", 
      RowBox[{"result", ",", 
       RowBox[{"Max", "[", 
        RowBox[{"mat", "[", 
         RowBox[{"[", "k", "]"}], "]"}], "]"}]}], "]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"k", ",", "1", ",", "3"}], "}"}]}], "\[IndentingNewLine]", "]"}],
   ";"}], "\[IndentingNewLine]", "result"}], "Input",
 CellChangeTimes->{{3.58886105328648*^9, 3.588861096465907*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "4", ",", "9"}], "}"}]], "Output",
 CellChangeTimes->{3.653644971565793*^9}]
}, Open  ]],

Cell["Functional approach:", "Text",
 CellChangeTimes->{{3.588861125982149*^9, 3.588861130357506*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Max", ",", "mat"}], "]"}]], "Input",
 CellChangeTimes->{{3.5888611363589907`*^9, 3.588861145726509*^9}, 
   3.653645063934976*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "4", ",", "9"}], "}"}]], "Output",
 CellChangeTimes->{3.653645066511978*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"result", ",", "mat"}], "]"}]], "Input",
 CellChangeTimes->{{3.588861148928385*^9, 3.5888611536558104`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Rule-based Programming", "Subsection",
 CellChangeTimes->{{3.585385946922893*^9, 3.58538595345717*^9}}],

Cell["\<\
Recall that when you make an assignment to a symbol, the value of that symbol \
is automatically substituted into any expression containing that symbol.\
\>", "Text",
 CellChangeTimes->{{3.5888615258506002`*^9, 3.58886152703197*^9}},
 CellTags->"Programming with Rules"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "=", "5"}]], "Input",
 CellTags->"Programming with Rules"],

Cell[BoxData["5"], "Output",
 CellChangeTimes->{3.653645342879689*^9},
 CellTags->"Programming with Rules"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SuperscriptBox["x", "2"], "+", 
  RowBox[{"x", " ", "y"}]}]], "Input",
 CellChangeTimes->{{3.588861532208973*^9, 3.58886153552907*^9}},
 CellTags->"Programming with Rules"],

Cell[BoxData[
 RowBox[{"25", "+", 
  RowBox[{"5", " ", "y"}]}]], "Output",
 CellChangeTimes->{3.6536453500201*^9},
 CellTags->"Programming with Rules"]
}, Open  ]],

Cell[TextData[{
 "Replacement rules can be used to make substitutions in other expressions \
without assigning values to symbols. For example, ",
 Cell[BoxData[
  RowBox[{"x", "\[Rule]", "5"}]]],
 " represents a rule for replacing ",
 StyleBox["x", "MR"],
 " by ",
 StyleBox["5", "MR"],
 ". The ",
 StyleBox["\[Rule]", "MR"],
 " operator is entered by typing ",
 StyleBox["-", "MR"],
 " followed by ",
 StyleBox[">", "MR"],
 ". "
}], "Text",
 CellChangeTimes->{{3.5888615531750603`*^9, 3.588861569822989*^9}},
 CellTags->"Programming with Rules"],

Cell[TextData[{
 "This input uses the ",
 Cell[BoxData[
  ButtonBox["ReplaceAll",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/ReplaceAll"]], "InlineFormula"],
 " function and the rule ",
 Cell[BoxData[
  RowBox[{"x", "\[Rule]", "5"}]]],
 " to make a substitution for ",
 StyleBox["x", "MR"],
 " in the expression..."
}], "Text",
 CellChangeTimes->{{3.5888615867580843`*^9, 3.588861587270014*^9}},
 CellTags->"Programming with Rules"],

Cell[BoxData[
 RowBox[{"Clear", "[", "x", "]"}]], "Input",
 CellTags->"Programming with Rules"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReplaceAll", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["x", "2"], "+", 
    RowBox[{"x", " ", "y"}]}], ",", 
   RowBox[{"x", "\[Rule]", "5"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.588861591527584*^9, 3.588861593455184*^9}, {
  3.653645383997375*^9, 3.653645385294499*^9}},
 CellTags->"Programming with Rules"],

Cell[BoxData[
 RowBox[{"25", "+", 
  RowBox[{"5", " ", "y"}]}]], "Output",
 CellChangeTimes->{{3.653645378292973*^9, 3.653645393024467*^9}},
 CellTags->"Programming with Rules"]
}, Open  ]],

Cell[TextData[{
 "The basic syntax of ",
 Cell[BoxData[
  ButtonBox["ReplaceAll",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/ReplaceAll"]], "InlineFormula"],
 " is:"
}], "Text"],

Cell[BoxData[
 RowBox[{"ReplaceAll", "[", 
  RowBox[{
   StyleBox["expr", "TI"], ",", 
   RowBox[{
    StyleBox["pattern", "TI"], "\[Rule]", 
    StyleBox["replacement", "TI"]}]}], "]"}]], "Text",
 TextAlignment->-0.5],

Cell[TextData[{
 "Here is the same input using the shorthand ",
 StyleBox["/.", "MR"],
 " operator for ",
 Cell[BoxData[
  ButtonBox["ReplaceAll",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/ReplaceAll"]], "InlineFormula"],
 "."
}], "Text",
 CellTags->"Programming with Rules"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["x", "2"], "+", 
   RowBox[{"x", " ", "y"}]}], "/.", 
  RowBox[{"x", "\[Rule]", "5"}]}]], "Input",
 CellChangeTimes->{{3.588861611910617*^9, 3.588861613854857*^9}},
 CellTags->"Programming with Rules"],

Cell[BoxData[
 RowBox[{"25", "+", 
  RowBox[{"5", " ", "y"}]}]], "Output",
 CellChangeTimes->{3.653645545916626*^9},
 CellTags->"Programming with Rules"]
}, Open  ]],

Cell["The basic syntax for the shorthand notation is:", "Text"],

Cell[BoxData[
 RowBox[{
  StyleBox["expr", "TI"], "/.", 
  RowBox[{
   StyleBox["pattern", "TI"], "\[Rule]", 
   StyleBox["replacement", "TI"]}]}]], "Text",
 TextAlignment->-0.5],

Cell[TextData[{
 "The replacement rule does not assign any value to ",
 StyleBox["x", "MR"],
 "."
}], "Text",
 CellChangeTimes->{{3.588861629542548*^9, 3.588861630700325*^9}},
 CellTags->"Programming with Rules"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "x"}]], "Input",
 CellTags->"Programming with Rules"],

Cell["Global`x", "Print", "PrintUsage",
 CellChangeTimes->{3.653645553111209*^9},
 CellTags->{
  "Info-9f33aa72-2fa6-44cc-9079-2198bdfe6c00", "Programming with Rules"}]
}, Open  ]],

Cell["An example of replacement on strings:", "Text",
 CellChangeTimes->{{3.5888655619790583`*^9, 3.588865565995305*^9}},
 CellTags->"Programming with Rules"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringReplace", "[", 
  RowBox[{"\"\<Which witch wished which wicked wish?\>\"", ",", 
   RowBox[{"\"\<w\>\"", "\[Rule]", "\"\<W\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.588865571156427*^9, {3.5888656739725847`*^9, 3.58886567764179*^9}},
 CellTags->"Programming with Rules"],

Cell[BoxData["\<\"Which Witch Wished Which Wicked Wish?\"\>"], "Output",
 CellChangeTimes->{3.653645563576226*^9},
 CellTags->"Programming with Rules"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Patterns", "Subsubsection",
 CellChangeTimes->{{3.588865807084752*^9, 3.5888658096592197`*^9}}],

Cell[TextData[{
 "The expression on the left side of a rule or assignment is a ",
 StyleBox["pattern",
  FontSlant->"Italic"],
 ". Patterns can be constructed to match any class of expressions."
}], "Text",
 CellChangeTimes->{{3.588865866859147*^9, 3.5888658848009644`*^9}},
 CellTags->"Programming with Rules"],

Cell[BoxData[GridBox[{
   {
    StyleBox["Pattern",
     FontWeight->"Bold"], 
    StyleBox[
     RowBox[{"Expression", " ", "that", " ", "match"}],
     FontWeight->"Bold"], 
    StyleBox["Example",
     FontWeight->"Bold"]},
   {"_", 
    RowBox[{"Any", " ", "expression"}], 
    RowBox[{"x", ",", " ", "\"\<text\>\"", ",", " ", "42"}]},
   {"_Real", 
    RowBox[{"Expression", " ", "with", " ", "head", " ", "Real"}], "1.23"},
   {
    RowBox[{"_", "?", "Negative"}], 
    RowBox[{
    "Expression", " ", "that", " ", "passes", " ", "the", " ", "Negative", 
     " ", "test"}], 
    RowBox[{"-", "42"}]},
   {
    RowBox[{"{", 
     RowBox[{"_", ",", "_"}], "}"}], 
    RowBox[{"List", " ", "of", " ", "two", " ", "expressions"}], 
    RowBox[{"{", 
     RowBox[{"x", ",", "123"}], "}"}]}
  }]], "Text",
 CellChangeTimes->{{3.58886590583674*^9, 3.588866038534211*^9}, 
   3.588911319980493*^9, {3.653645669903098*^9, 3.65364567310634*^9}}],

Cell[TextData[{
 "The pattern ",
 StyleBox["_", "MR"],
 " (the underscore character) matches ",
 StyleBox["any",
  FontSlant->"Italic"],
 " expression."
}], "Item",
 CellTags->"Programming with Rules"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"g", "[", "z", "]"}], ",", "\[Pi]", ",", "3.4", ",", 
     RowBox[{"-", "5"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}]}], "}"}], ",", "_"}], "]"}]], "Input",
 CellTags->"Programming with Rules"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", 
   RowBox[{"g", "[", "z", "]"}], ",", "\[Pi]", ",", "3.4`", ",", 
   RowBox[{"-", "5"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.653645825679837*^9},
 CellTags->"Programming with Rules"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Named patterns: the pattern ",
 StyleBox["x_", "MR"],
 " gives the matched expression the name ",
 StyleBox["x", "MR"],
 ", so that expression can be used elsewhere in the rule."
}], "Item",
 CellTags->"Programming with Rules"],

Cell["Matching heads:", "Item",
 CellChangeTimes->{3.588866113640832*^9},
 CellTags->"Programming with Rules"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"g", "[", "z", "]"}], ",", "\[Pi]", ",", "3.4", ",", 
     RowBox[{"-", "5"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}]}], "}"}], ",", "_Real"}], "]"}]], "Input",\

 CellTags->"Programming with Rules"],

Cell[BoxData[
 RowBox[{"{", "3.4`", "}"}]], "Output",
 CellChangeTimes->{3.653645846602149*^9},
 CellTags->"Programming with Rules"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"g", "[", "z", "]"}], ",", "\[Pi]", ",", "3.4", ",", 
     RowBox[{"-", "5"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}]}], "}"}], ",", "_Symbol"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.588866115955312*^9, 3.588866121308797*^9}},
 CellTags->"Programming with Rules"],

Cell[BoxData[
 RowBox[{"{", "\[Pi]", "}"}]], "Output",
 CellChangeTimes->{3.653645849700536*^9},
 CellTags->"Programming with Rules"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "[", 
  RowBox[{"g", "[", "z", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.6536459103775797`*^9, 3.65364596402763*^9}}],

Cell[BoxData["g"], "Output",
 CellChangeTimes->{{3.6536459171498337`*^9, 3.653645964481399*^9}}]
}, Open  ]],

Cell[TextData[{
 "Matching with predicates: the pattern ",
 Cell[BoxData[
  RowBox[{
   StyleBox[
    RowBox[{
     StyleBox["x", "TI"], "_"}]], "/;", 
   RowBox[{"Negative", "[", 
    StyleBox["x", "TI"], "]"}]}]]],
 " matches any negative number. It can be read as, \[OpenCurlyDoubleQuote]the \
pattern named ",
 StyleBox["x", "IT"],
 " under the condition that ",
 StyleBox["x", "IT"],
 " passes the ",
 Cell[BoxData[
  ButtonBox["Negative",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Negative"]], "InlineFormula"],
 " test\[CloseCurlyDoubleQuote]."
}], "Item",
 CellTags->"Programming with Rules"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"g", "[", "z", "]"}], ",", "\[Pi]", ",", "3.4", ",", 
     RowBox[{"-", "5"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}]}], "}"}], ",", 
   RowBox[{"n_", "/;", 
    RowBox[{"Negative", "[", "n", "]"}]}]}], "]"}]], "Input",
 CellTags->"Programming with Rules"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"-", "5"}], "}"}]], "Output",
 CellChangeTimes->{3.653645969531499*^9},
 CellTags->"Programming with Rules"]
}, Open  ]],

Cell["a shorthand notation:", "Text",
 CellChangeTimes->{{3.588866149264161*^9, 3.588866153055485*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"g", "[", "z", "]"}], ",", "\[Pi]", ",", "3.4", ",", 
     RowBox[{"-", "5"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}]}], "}"}], ",", 
   RowBox[{"_", "?", "Negative"}]}], "]"}]], "Input",
 CellTags->"Programming with Rules"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"-", "5"}], "}"}]], "Output",
 CellChangeTimes->{3.653645971924006*^9},
 CellTags->"Programming with Rules"]
}, Open  ]],

Cell[TextData[{
 "Matching a pair: the pattern ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"p_", ",", "q_"}], "}"}]]],
 " matches any list containing any two expressions."
}], "Item",
 CellTags->"Programming with Rules"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"g", "[", "z", "]"}], ",", "\[Pi]", ",", "3.4", ",", 
     RowBox[{"-", "5"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"p_", ",", "q_"}], "}"}]}], "]"}]], "Input",
 CellTags->"Programming with Rules"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"a", ",", "b"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.653645976108584*^9},
 CellTags->"Programming with Rules"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pattern matching", "Subsubsection",
 CellChangeTimes->{{3.588866209552475*^9, 3.588866212477734*^9}}],

Cell["\<\
Previously shown example of checking arguments of the function...\
\>", "Text",
 CellChangeTimes->{{3.58886624571898*^9, 3.588866261539991*^9}, 
   3.589012982925975*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "n_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"IntegerQ", "[", "n", "]"}], "&&", 
     RowBox[{"n", ">", "0"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"result", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"result", "=", 
        RowBox[{"result", "+", "k"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"k", ",", "1", ",", "n"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "result"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Print", "[", 
     RowBox[{"n", ",", " ", "\"\< is not a positive integer.\>\""}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellTags->"Procedural Programming"],

Cell["...can be redefined using patterns:", "Text",
 CellChangeTimes->{{3.58886626454773*^9, 3.5888662863797617`*^9}}],

Cell[BoxData[
 RowBox[{"Clear", "[", "f", "]"}]], "Input",
 CellChangeTimes->{{3.5888662937619963`*^9, 3.5888662950293293`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"n_Integer", "?", "Positive"}], "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"result", "=", "0"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"result", "=", 
        RowBox[{"result", "+", "k"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"k", ",", "1", ",", "n"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "result"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.5888663001384077`*^9, 3.5888663401957903`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "f"}]], "Input",
 CellChangeTimes->{{3.5888663437417517`*^9, 3.588866343898765*^9}}],

Cell[CellGroupData[{

Cell["Global`f", "Print", "PrintUsage",
 CellChangeTimes->{3.653646124302451*^9},
 CellTags->"Info-ed33d541-ec8b-4ad4-91d4-a90cda982af2"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {GridBox[{
       {
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"n_Integer", "?", "Positive"}], "]"}], ":=", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"result", "=", "0"}], "}"}], ",", 
           RowBox[{
            RowBox[{"Do", "[", 
             RowBox[{
              RowBox[{"result", "=", 
               RowBox[{"result", "+", "k"}]}], ",", 
              RowBox[{"{", 
               RowBox[{"k", ",", "1", ",", "n"}], "}"}]}], "]"}], ";", 
            "result"}]}], "]"}]}]}
      },
      BaselinePosition->{Baseline, {1, 1}},
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{"Columns" -> {{
           Scaled[0.999]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  Definition[$CellContext`f],
  Editable->False]], "Print",
 CellChangeTimes->{3.6536461243872223`*^9},
 CellTags->"Info-ed33d541-ec8b-4ad4-91d4-a90cda982af2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"-", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.588866345435368*^9, 3.5888663464985657`*^9}}],

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"-", "1"}], "]"}]], "Output",
 CellChangeTimes->{3.653646125887828*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "\[Pi]", "]"}]], "Input",
 CellChangeTimes->{{3.588866347925886*^9, 3.588866351980914*^9}}],

Cell[BoxData[
 RowBox[{"f", "[", "\[Pi]", "]"}]], "Output",
 CellChangeTimes->{3.6536461275177717`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "10", "]"}]], "Input",
 CellChangeTimes->{{3.5888663540226583`*^9, 3.588866355370706*^9}}],

Cell[BoxData["55"], "Output",
 CellChangeTimes->{3.653646128958742*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", "f", "]"}]], "Input",
 CellChangeTimes->{{3.588866358904405*^9, 3.588866360100586*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pattern examples", "Subsubsection",
 CellChangeTimes->{{3.58886641436161*^9, 3.588866417206539*^9}}],

Cell["Extract all integers", "Item",
 CellChangeTimes->{{3.5888664756394453`*^9, 3.5888664810926456`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"-", "2"}], ",", 
     RowBox[{"-", "3.14"}], ",", "42", ",", "3.14", ",", "x"}], "}"}], ",", 
   "_Integer"}], "]"}]], "Input",
 CellChangeTimes->{{3.588866438456514*^9, 3.5888664507596617`*^9}},
 CellTags->"Programming with Rules"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   RowBox[{"-", "2"}], ",", "42"}], "}"}]], "Output",
 CellChangeTimes->{3.65364617214734*^9},
 CellTags->"Programming with Rules"]
}, Open  ]],

Cell["Replace all integers by 0", "Item",
 CellChangeTimes->{{3.588866496870277*^9, 3.588866503355701*^9}, 
   3.588866552730225*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"1", ",", 
    RowBox[{"-", "2"}], ",", 
    RowBox[{"-", "3.14"}], ",", "42", ",", "3.14", ",", "x"}], "}"}], "/.", 
  "\[InvisibleSpace]", 
  RowBox[{"_Integer", "\[Rule]", "0"}]}]], "Input",
 CellChangeTimes->{3.588866461923514*^9},
 CellTags->"Programming with Rules"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", 
   RowBox[{"-", "3.14`"}], ",", "0", ",", "3.14`", ",", "x"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.65364622386248*^9},
 CellTags->"Programming with Rules"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.65364622023424*^9, 3.6536462290800533`*^9}},
 CellTags->"Programming with Rules"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.653646230985612*^9, 3.6536462309906073`*^9}},
 CellTags->"Programming with Rules"],

Cell["Extract all elements that pass the Negative test", "Item",
 CellChangeTimes->{{3.588866496870277*^9, 3.588866531210881*^9}}],

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"-", "2"}], ",", 
     RowBox[{"-", "3.14"}], ",", "42", ",", "3.14", ",", "x"}], "}"}], ",", 
   RowBox[{"_", "?", "Negative"}]}], "]"}]], "Input",
 CellChangeTimes->{3.588866487008877*^9},
 CellTags->"Programming with Rules"],

Cell["Replace all negative numbers by 0", "Item",
 CellChangeTimes->{{3.588866496870277*^9, 3.588866549875554*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"1", ",", 
    RowBox[{"-", "2"}], ",", 
    RowBox[{"-", "3.14"}], ",", "42", ",", "3.14", ",", "x"}], "}"}], "/.", 
  "\[InvisibleSpace]", 
  RowBox[{
   RowBox[{"_", "?", "Negative"}], "\[Rule]", "0"}]}]], "Input",
 CellChangeTimes->{3.588866490297676*^9},
 CellTags->"Programming with Rules"],

Cell["Reverse the elements in all lists of two elements", "Item",
 CellChangeTimes->{{3.588866496870277*^9, 3.588866531210881*^9}, {
  3.5888665787949953`*^9, 3.588866603144549*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "6"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"7", ",", "8"}], "}"}]}], "}"}], "/.", "\[InvisibleSpace]", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p_", ",", "q_"}], "}"}], "\[Rule]", 
   RowBox[{"{", 
    RowBox[{"q", ",", "p"}], "}"}]}]}]], "Input",
 CellChangeTimes->{{3.5888666075874243`*^9, 3.588866609322856*^9}},
 CellTags->"Programming with Rules"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "7"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6536462473458*^9},
 CellTags->"Programming with Rules"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Comparing Programming Styles", "Subsection",
 CellChangeTimes->{{3.585385974840604*^9, 3.585385981720158*^9}}],

Cell["\<\
Nearly all nontrivial programs use a mixture of programming styles. No one \
style is always better than another. You should choose whatever programming \
style seems most natural for you or for what you want to do.\
\>", "Text",
 CellChangeTimes->{{3.588866823813533*^9, 3.588866826332712*^9}}],

Cell[CellGroupData[{

Cell["Example", "Subsubsection",
 CellChangeTimes->{{3.588866790516922*^9, 3.5888667918182898`*^9}, {
  3.58886714500373*^9, 3.5888671451982603`*^9}}],

Cell["\<\
Given a list of pairs of numbers, return a list consisting of the sum of each \
pair.\
\>", "Text",
 CellChangeTimes->{{3.588866859206616*^9, 3.588866864871503*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"pairs", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "20"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"100", ",", "200"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "100"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "200"}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.588866881801989*^9, 3.5888669024007072`*^9}},
 CellTags->"Comparing Programming Styles"],

Cell["procedural approach", "Item",
 CellChangeTimes->{{3.58886691458463*^9, 3.588866920141822*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"Null", ",", 
     RowBox[{"{", 
      RowBox[{"Length", "[", "pairs", "]"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Do", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"result", "[", 
     RowBox[{"[", "k", "]"}], "]"}], "=", 
    RowBox[{
     RowBox[{"First", "[", 
      RowBox[{"pairs", "[", 
       RowBox[{"[", "k", "]"}], "]"}], "]"}], "+", 
     RowBox[{"Last", "[", 
      RowBox[{"pairs", "[", 
       RowBox[{"[", "k", "]"}], "]"}], "]"}]}]}], ",", "\[IndentingNewLine]", 
   
   RowBox[{"{", 
    RowBox[{"k", ",", "1", ",", 
     RowBox[{"Length", "[", "pairs", "]"}]}], "}"}]}], 
  "]"}], "\[IndentingNewLine]", "result"}], "Input",
 CellTags->"Comparing Programming Styles"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "30", ",", "300", ",", "101", ",", "202"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.653646386378985*^9, 3.653646508397991*^9},
 CellTags->"Comparing Programming Styles"]
}, Open  ]],

Cell[TextData[{
 "structured procedure using ",
 Cell[BoxData[
  ButtonBox["Table",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Table"]], "InlineFormula"]
}], "Item",
 CellChangeTimes->{{3.588866935413615*^9, 3.5888669388778133`*^9}, 
   3.589012989065998*^9},
 CellTags->"Comparing Programming Styles"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"pairs", "[", 
     RowBox[{"[", 
      RowBox[{"k", ",", "1"}], "]"}], "]"}], "+", 
    RowBox[{"pairs", "[", 
     RowBox[{"[", 
      RowBox[{"k", ",", "2"}], "]"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", 
     RowBox[{"Length", "[", "pairs", "]"}]}], "}"}]}], "]"}]], "Input",
 CellTags->"Comparing Programming Styles"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "30", ",", "300", ",", "101", ",", "202"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.6536464331945333`*^9, 3.653646617342536*^9},
 CellTags->"Comparing Programming Styles"]
}, Open  ]],

Cell["functional approaches", "Item",
 CellChangeTimes->{{3.588866953420706*^9, 3.5888669569486237`*^9}, {
  3.588866990398188*^9, 3.588866990579472*^9}},
 CellTags->"Comparing Programming Styles"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Total", ",", "pairs"}], "]"}]], "Input",
 CellTags->"Comparing Programming Styles"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "30", ",", "300", ",", "101", ",", "202"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.653646738067952*^9},
 CellTags->"Comparing Programming Styles"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Total", "[", 
  RowBox[{"Transpose", "[", "pairs", "]"}], "]"}]], "Input",
 CellTags->"Comparing Programming Styles"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "30", ",", "300", ",", "101", ",", "202"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.65364674611849*^9},
 CellTags->"Comparing Programming Styles"]
}, Open  ]],

Cell["rule-based approach", "Item",
 CellChangeTimes->{{3.588866953420706*^9, 3.5888669569486237`*^9}, {
  3.588866994667572*^9, 3.588866998843223*^9}},
 CellTags->"Comparing Programming Styles"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pairs", "/.", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p_", ",", "q_"}], "}"}], "\[Rule]", 
   RowBox[{"p", "+", "q"}]}]}]], "Input",
 CellChangeTimes->{{3.6536467860914507`*^9, 3.653646786742827*^9}},
 CellTags->"Comparing Programming Styles"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "30", ",", "300", ",", "101", ",", "202"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.653646787297862*^9},
 CellTags->"Comparing Programming Styles"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exercises", "Section",
 CellChangeTimes->{{3.585385829702592*^9, 3.5853858311817627`*^9}, {
  3.587377002419148*^9, 3.587377004141217*^9}}],

Cell[CellGroupData[{

Cell["Programming Style", "Subsection",
 CellChangeTimes->{{3.5888515317382107`*^9, 3.588851535928363*^9}}],

Cell["\<\
Evaluate the following expression to define data to be a list of pairs of \
elements.\
\>", "Text",
 CellChangeTimes->{{3.588851566743754*^9, 3.588851601550165*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x1", ",", "y1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x2", ",", "y2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x3", ",", "y3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x4", ",", "y4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x5", ",", "y5"}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.588851537302291*^9, 3.588851562913192*^9}}],

Cell[TextData[{
 "Here is a procedural program that reverses the elements in each pair. \
Evaluate this input to get the result. This program works by initializing a \
list in which all the elements are ",
 Cell[BoxData[
  ButtonBox["Null",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Null"]], "InlineFormula"],
 " and then assigning each element in that list to be the reverse of the \
corresponding element from ",
 StyleBox["data", "MR"],
 "."
}], "Text",
 CellChangeTimes->{3.5888516731261597`*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"Null", ",", 
     RowBox[{"{", 
      RowBox[{"Length", "[", "data", "]"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Do", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"result", "[", 
      RowBox[{"[", "k", "]"}], "]"}], "=", 
     RowBox[{"Reverse", "[", 
      RowBox[{"data", "[", 
       RowBox[{"[", "k", "]"}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"k", ",", "1", ",", 
      RowBox[{"Length", "[", "data", "]"}]}], "}"}]}], "\[IndentingNewLine]", 
   "]"}], ";"}], "\[IndentingNewLine]", "result"}], "Input",
 CellTags->{"Exercises", "Programming Style"}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"y1", ",", "x1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y2", ",", "x2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y3", ",", "x3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y4", ",", "x4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y5", ",", "x5"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.653646850202799*^9},
 CellTags->{"Exercises", "Programming Style"}]
}, Open  ]],

Cell["Create a functional program that gives the same result.", "Item",
 CellChangeTimes->{{3.588851773094419*^9, 3.58885177416035*^9}, {
  3.5888518984282103`*^9, 3.588851923747388*^9}, {3.588852036858124*^9, 
  3.5888520400424433`*^9}, {3.6536468604045553`*^9, 3.6536468604095163`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Reverse", ",", " ", "data"}], "]"}]], "Input",
 CellChangeTimes->{{3.653646927520503*^9, 3.6536469436459*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"y1", ",", "x1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y2", ",", "x2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y3", ",", "x3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y4", ",", "x4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y5", ",", "x5"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.653646944256493*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reverse", "[", 
  RowBox[{"data", ",", " ", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.65364725494746*^9, 3.653647262721472*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"y1", ",", "x1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y2", ",", "x2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y3", ",", "x3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y4", ",", "x4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y5", ",", "x5"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.6536472598743*^9, 3.653647263197528*^9}}]
}, Open  ]],

Cell["Create a rule-based program that gives the same result.", "Item",
 CellChangeTimes->{{3.588851773094419*^9, 3.58885177416035*^9}, {
  3.5888518984282103`*^9, 3.5888519353870153`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", " ", "/.", " ", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p_", ",", " ", "q_"}], "}"}], " ", "\[Rule]", " ", 
   RowBox[{"{", 
    RowBox[{"q", ",", " ", "p"}], "}"}]}]}]], "Input",
 CellChangeTimes->{{3.653646949547423*^9, 3.6536469690107517`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"y1", ",", "x1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y2", ",", "x2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y3", ",", "x3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y4", ",", "x4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y5", ",", "x5"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.653646961877647*^9, 3.653646970683155*^9}}]
}, Open  ]],

Cell[TextData[{
 "Modify these programs ",
 StyleBox["(procedural, functional, rule-based)",
  FontSlant->"Italic"],
 " so that the result is a list of the first element in each pair. For ",
 StyleBox["data", "MR"],
 ", the result from each program will be ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"x1", ",", "x2", ",", "x3", ",", "x4", ",", "x5"}], "}"}]]],
 "."
}], "Item",
 CellChangeTimes->{{3.588851773094419*^9, 3.58885177416035*^9}, {
  3.5888518984282103`*^9, 3.588851965843698*^9}, {3.588852012617749*^9, 
  3.5888520126226997`*^9}, {3.5888520459515953`*^9, 3.588852071774448*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"Null", ",", 
     RowBox[{"{", 
      RowBox[{"Length", "[", "data", "]"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Do", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"result", "[", 
      RowBox[{"[", "k", "]"}], "]"}], "=", 
     RowBox[{"First", "[", 
      RowBox[{"data", "[", 
       RowBox[{"[", "k", "]"}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"k", ",", "1", ",", 
      RowBox[{"Length", "[", "data", "]"}]}], "}"}]}], "\[IndentingNewLine]", 
   "]"}], ";"}], "\[IndentingNewLine]", "result"}], "Input",
 CellChangeTimes->{{3.653647137543154*^9, 3.653647170456745*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x1", ",", "x2", ",", "x3", ",", "x4", ",", "x5"}], "}"}]], "Output",\

 CellChangeTimes->{3.6536471718002768`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"First", ",", " ", "data"}], "]"}]], "Input",
 CellChangeTimes->{{3.653647003532361*^9, 3.653647102969592*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x1", ",", "x2", ",", "x3", ",", "x4", ",", "x5"}], "}"}]], "Output",\

 CellChangeTimes->{3.653647103453946*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", " ", "/.", " ", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p_", ",", " ", "q_"}], "}"}], " ", "\[Rule]", " ", "p"}]}]], \
"Input",
 CellChangeTimes->{{3.6536470818458757`*^9, 3.6536470818502417`*^9}, {
  3.6536471175689697`*^9, 3.653647131668775*^9}, {3.65364717524807*^9, 
  3.653647175629579*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x1", ",", "x2", ",", "x3", ",", "x4", ",", "x5"}], "}"}]], "Output",\

 CellChangeTimes->{{3.653647129296185*^9, 3.653647132286433*^9}, 
   3.653647176427106*^9}]
}, Open  ]],

Cell[TextData[{
 "Now modify these programs",
 StyleBox[" (procedural, functional, rule-based)",
  FontSlant->"Italic"],
 " so that each program returns a list containing the sum of the elements in \
each pair."
}], "Item",
 CellChangeTimes->{
  3.588852009365127*^9, {3.5888520742323427`*^9, 3.588852082623251*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"Null", ",", 
     RowBox[{"{", 
      RowBox[{"Length", "[", "data", "]"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Do", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"result", "[", 
      RowBox[{"[", "k", "]"}], "]"}], "=", 
     RowBox[{"Total", "[", 
      RowBox[{"data", "[", 
       RowBox[{"[", "k", "]"}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"k", ",", "1", ",", 
      RowBox[{"Length", "[", "data", "]"}]}], "}"}]}], "\[IndentingNewLine]", 
   "]"}], ";"}], "\[IndentingNewLine]", "result", "\[IndentingNewLine]"}], \
"Input",
 CellChangeTimes->{{3.6536473058849287`*^9, 3.653647330828738*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"x1", "+", "y1"}], ",", 
   RowBox[{"x2", "+", "y2"}], ",", 
   RowBox[{"x3", "+", "y3"}], ",", 
   RowBox[{"x4", "+", "y4"}], ",", 
   RowBox[{"x5", "+", "y5"}]}], "}"}]], "Output",
 CellChangeTimes->{3.653647333285396*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Total", ",", " ", "data"}], "]"}]], "Input",
 CellChangeTimes->{{3.6536473400643063`*^9, 3.653647346765986*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"x1", "+", "y1"}], ",", 
   RowBox[{"x2", "+", "y2"}], ",", 
   RowBox[{"x3", "+", "y3"}], ",", 
   RowBox[{"x4", "+", "y4"}], ",", 
   RowBox[{"x5", "+", "y5"}]}], "}"}]], "Output",
 CellChangeTimes->{3.653647347148538*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", " ", "/.", " ", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p_", ",", " ", "q_"}], "}"}], " ", "\[Rule]", " ", 
   RowBox[{"p", "+", "q"}]}]}]], "Input",
 CellChangeTimes->{{3.653647350646407*^9, 3.653647364506239*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"x1", "+", "y1"}], ",", 
   RowBox[{"x2", "+", "y2"}], ",", 
   RowBox[{"x3", "+", "y3"}], ",", 
   RowBox[{"x4", "+", "y4"}], ",", 
   RowBox[{"x5", "+", "y5"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.653647360766576*^9, 3.6536473654038754`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Debugging a Procedural Program", "Subsection",
 CellChangeTimes->{{3.588854284590309*^9, 3.588854287062302*^9}},
 CellTags->{"Exercises", "Debugging a Program"}],

Cell[TextData[{
 "Evaluate the following input to define a function ",
 StyleBox["f", "MR"],
 " that takes a matrix as an argument. This function is intended to return \
the row from that matrix for which the first element has the largest absolute \
value."
}], "Text",
 CellTags->{"Exercises", "Debugging a Program"}],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "m_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "result", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"result", "=", 
       RowBox[{"m", "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Do", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Abs", "[", 
             RowBox[{"m", "[", 
              RowBox[{"[", 
               RowBox[{"k", ",", "1"}], "]"}], "]"}], "]"}], ">", 
            RowBox[{"Abs", "[", 
             RowBox[{"result", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"result", "=", 
            RowBox[{"m", "[", 
             RowBox[{"[", "k", "]"}], "]"}]}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"k", ",", "2", ",", 
           RowBox[{"Length", "[", "m", "]"}]}], "}"}]}], 
        "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "result"}]}], 
     "}"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellTags->{"Exercises", "Debugging a Program"}],

Cell[TextData[{
 "Evaluate the following input and note that this program does not do what it \
is intended to do. It returns the correct row from the matrix, but each \
element in that row is multiplied by ",
 Cell[BoxData[
  ButtonBox["Null",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Null"]], "InlineFormula"],
 ", and that row is enclosed in an unwanted list."
}], "Item",
 CellTags->{"Exercises", "Debugging a Program"}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"(", GridBox[{
     {"1", "4", "7"},
     {"9", "1", "8"},
     {"4", "6", "1"},
     {"11", "5", "8"},
     {"6", "1", "1"}
    }], ")"}], "]"}]], "Input",
 CellTags->{"Exercises", "Debugging a Program"}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"11", " ", "Null"}], ",", 
    RowBox[{"5", " ", "Null"}], ",", 
    RowBox[{"8", " ", "Null"}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.653647403921908*^9},
 CellTags->{"Exercises", "Debugging a Program"}]
}, Open  ]],

Cell[TextData[{
 "Correct the two errors in this program so that the result for the example \
is ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"11", ",", "5", ",", "8"}], "}"}]]],
 "."
}], "Item",
 CellTags->{"Exercises", "Debugging a Program"}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
PrintingStyleEnvironment->"Printout",
WindowSize->{1366, 716},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
PrintingCopies->1,
PrintingStartingPageNumber->1,
PrintingPageRange->{1, Automatic},
PageHeaders->{{
   Cell[
    TextData[{"Introduction", " ", "to", " ", "Mathematica"}], "Header", 
    CellMargins -> {{0, Inherited}, {Inherited, Inherited}}], None, None}, {
  None, None, 
   Cell[
    TextData[{"Introduction", " ", "to", " ", "Mathematica"}], "Header", 
    CellMargins -> {{Inherited, 0}, {Inherited, Inherited}}]}},
PageFooters->{{
   Cell[
    TextData[{
      StyleBox[
       CounterBox["Page"], "PageNumber"], "   ", "|"}], "Footer", 
    CellMargins -> {{0, Inherited}, {Inherited, Inherited}}], None, 
   Cell[
    TextData[{
     "A4M36TPJ", ",", " ", "WS", " ", "13", "/", "14", ",", " ", "Week", " ", 
      "1"}], "Footer", 
    CellMargins -> {{Inherited, 0}, {Inherited, Inherited}}]}, {
   Cell[
    TextData[{
     "A4M36TPJ", ",", " ", "WS", " ", "13", "/", "14", ",", " ", "Week", " ", 
      "1"}], "Footer", 
    CellMargins -> {{0, Inherited}, {Inherited, Inherited}}], None, 
   Cell[
    TextData[{"|", "   ", 
      StyleBox[
       CounterBox["Page"], "PageNumber"]}], "Footer", 
    CellMargins -> {{Inherited, 0}, {Inherited, Inherited}}]}},
PageHeaderLines->{False, False},
PageFooterLines->{False, False},
PrintingOptions->{"FacingPages"->True,
"FirstPageFace"->Right,
"FirstPageFooter"->True,
"FirstPageHeader"->False},
ShowSelection->True,
FrontEndVersion->"10.2 for Linux x86 (64-bit) (July 29, 2015)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"], FontFamily -> "Tekton Pro", 
    FontSize -> 12, FontWeight -> "Plain", FontSlant -> "Plain"], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Title"], CellMargins -> {{27, Inherited}, {5, 30}}, 
       FontFamily -> "Times", FontSize -> 40, FontWeight -> "Plain", 
       FontSlant -> "Plain"], 
      Cell[
       StyleData["Title", "Presentation"], ShowGroupOpener -> False, FontSize -> 
       42], 
      Cell[
       StyleData["Title", "SlideShow"], FontSize -> 42], 
      Cell[
       StyleData["Title", "Condensed"], FontSize -> 36], 
      Cell[
       StyleData["Title", "Printout"], CellFrame -> {{1, 1}, {0, 1}}, 
       CellMargins -> {{10, Inherited}, {0, 30}}, FontSize -> 38], 
      Cell[
       StyleData["Title", "PrintoutGray"], FontSize -> 38]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Subtitle"], FontFamily -> "Heiti SC", FontSize -> 20, 
       FontWeight -> "Plain", FontSlant -> "Plain", FontColor -> 
       RGBColor[0., 0., 0.]], 
      Cell[
       StyleData["Subtitle", "Presentation"], FontSize -> 20], 
      Cell[
       StyleData["Subtitle", "SlideShow"], FontSize -> 20], 
      Cell[
       StyleData["Subtitle", "Condensed"], FontSize -> 16], 
      Cell[
       StyleData["Subtitle", "Printout"], CellFrame -> {{1, 1}, {1, 0}}, 
       CellMargins -> {{10, Inherited}, {20, 0}}, FontSize -> 14], 
      Cell[
       StyleData["Subtitle", "PrintoutGray"], FontSize -> 14]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Subsubtitle"], FontFamily -> "Heiti SC", FontSize -> 12, 
       FontWeight -> "Plain", FontSlant -> "Plain", FontColor -> 
       RGBColor[0., 0., 0.]], 
      Cell[
       StyleData["Subsubtitle", "Presentation"], LineSpacing -> {1, 2}, 
       FontSize -> 12], 
      Cell[
       StyleData["Subsubtitle", "SlideShow"], FontSize -> 12], 
      Cell[
       StyleData["Subsubtitle", "Condensed"], FontSize -> 11], 
      Cell[
       StyleData["Subsubtitle", "Printout"], FontSize -> 11], 
      Cell[
       StyleData["Subsubtitle", "PrintoutGray"], FontSize -> 11]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Section"], CellFrame -> {{0, 0}, {0, 1}}, ShowGroupOpener -> 
       True, CellFrameColor -> GrayLevel[0.5], FontFamily -> "Heiti SC", 
       FontSize -> 24, FontWeight -> "Plain", FontSlant -> "Plain", FontColor -> 
       RGBColor[0.714549, 0.2065, 0.109392]], 
      Cell[
       StyleData["Section", "Presentation"], CellFrame -> {{0, 0}, {0, 1}}, 
       FontSize -> 24], 
      Cell[
       StyleData["Section", "SlideShow"], CellFrame -> {{0, 0}, {0, 1}}, 
       FontSize -> 24], 
      Cell[
       StyleData["Section", "Condensed"], ShowGroupOpener -> False, FontSize -> 
       20], 
      Cell[
       StyleData["Section", "Printout"], ShowGroupOpener -> False, FontFamily -> 
       "Times", FontSize -> 20], 
      Cell[
       StyleData["Section", "PrintoutGray"], ShowGroupOpener -> False, 
       FontFamily -> "Times", FontSize -> 20]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Subsection"], CellFrame -> {{0, 0}, {0, 0}}, 
       ShowGroupOpener -> True, CellFrameColor -> GrayLevel[0.5], FontFamily -> 
       "Heiti SC", FontSize -> 18, FontWeight -> "Bold", FontSlant -> "Plain",
        FontColor -> RGBColor[0.734142, 0.338155, 0.162509]], 
      Cell[
       StyleData["Subsection", "Presentation"], CellFrame -> {{0, 0}, {0, 0}},
        FontSize -> 20], 
      Cell[
       StyleData["Subsection", "SlideShow"], CellFrame -> {{0, 0}, {0, 0}}, 
       FontSize -> 18], 
      Cell[
       StyleData["Subsection", "Condensed"], ShowGroupOpener -> False, 
       FontSize -> 16], 
      Cell[
       StyleData["Subsection", "Printout"], ShowGroupOpener -> False, 
       FontFamily -> "Times", FontSize -> 16, FontWeight -> "Plain", 
       FontSlant -> "Italic"], 
      Cell[
       StyleData["Subsection", "PrintoutGray"], ShowGroupOpener -> False, 
       FontSize -> 16]}, Open]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Subsubsection"], CellFrame -> {{0, 0}, {0, 0}}, 
       ShowGroupOpener -> True, CellFrameColor -> GrayLevel[0.5], FontFamily -> 
       "Heiti SC", FontSize -> 16, FontWeight -> "Bold", FontSlant -> "Plain",
        FontColor -> 
       RGBColor[
        0.7254749370565347, 0.20392156862745098`, 0.09410238803692683]], 
      Cell[
       StyleData["Subsubsection", "Presentation"], 
       CellFrame -> {{0, 0}, {0, 0}}, FontSize -> 16], 
      Cell[
       StyleData["Subsubsection", "SlideShow"], CellFrame -> {{0, 0}, {0, 0}},
        FontSize -> 16], 
      Cell[
       StyleData["Subsubsection", "Condensed"], ShowGroupOpener -> False, 
       FontSize -> 14], 
      Cell[
       StyleData["Subsubsection", "Printout"], ShowGroupOpener -> False, 
       FontFamily -> "Times", FontSize -> 14, FontWeight -> "Plain", 
       FontSlant -> "Italic"], 
      Cell[
       StyleData["Subsubsection", "PrintoutGray"], ShowGroupOpener -> False, 
       FontSize -> 14]}, Open]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Text"], FontFamily -> "Palatino", FontSize -> 14, 
       FontWeight -> "Plain", FontSlant -> "Plain"], 
      Cell[
       StyleData["Text", "Presentation"], FontSize -> 14], 
      Cell[
       StyleData["Text", "SlideShow"], FontSize -> 14], 
      Cell[
       StyleData["Text", "Condensed"], FontSize -> 12], 
      Cell[
       StyleData["Text", "Printout"], FontSize -> 12], 
      Cell[
       StyleData["Text", "PrintoutGray"], FontSize -> 12]}, Open]], 
   Cell[
    StyleData["Note"], CellFrame -> {{4, 4}, {1, 1}}, 
    CellMargins -> {{66, 10}, {7, 7}}, CellFrameColor -> GrayLevel[0.75], 
    CellFrameLabels -> {{"Note", None}, {None, None}}, MenuSortingValue -> 
    10000, FontFamily -> "Palatino Italic", FontSize -> 12, FontWeight -> 
    "Plain", FontSlant -> "Plain", FontColor -> GrayLevel[0.25]], 
   Cell[
    StyleData["ItemNumbered"], FontFamily -> "Palatino", FontSize -> 14, 
    FontWeight -> "Plain", FontSlant -> "Plain"], 
   Cell[
    StyleData["Item"], FontFamily -> "Palatino", FontSize -> 14, FontWeight -> 
    "Plain", FontSlant -> "Plain"]}, Visible -> False, FrontEndVersion -> 
  "10.2 for Linux x86 (64-bit) (July 29, 2015)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Procedural Programming"->{
  Cell[69625, 1654, 488, 8, 74, "Text",
   CellTags->"Procedural Programming"],
  Cell[70138, 1666, 304, 8, 77, "Input",
   CellTags->"Procedural Programming"],
  Cell[70445, 1676, 408, 12, 32, "Output",
   CellTags->"Procedural Programming"],
  Cell[70868, 1691, 608, 20, 36, "Text",
   CellTags->"Procedural Programming"],
  Cell[71479, 1713, 285, 8, 32, "Text",
   CellTags->"Procedural Programming"],
  Cell[71767, 1723, 466, 12, 99, "Input",
   CellTags->"Procedural Programming"],
  Cell[72258, 1739, 91, 2, 32, "Input",
   CellTags->"Procedural Programming"],
  Cell[72352, 1743, 288, 8, 23, "Print",
   CellTags->"Procedural Programming"],
  Cell[72655, 1754, 129, 3, 32, "Text",
   CellTags->"Procedural Programming"],
  Cell[72809, 1761, 179, 6, 30, "Item",
   CellTags->"Procedural Programming"],
  Cell[72991, 1769, 239, 9, 27, "Subitem",
   CellTags->"Procedural Programming"],
  Cell[73233, 1780, 59, 1, 30, "Item",
   CellTags->"Procedural Programming"],
  Cell[73295, 1783, 567, 23, 27, "Subitem",
   CellTags->"Procedural Programming"],
  Cell[73865, 1808, 110, 1, 30, "Item",
   CellTags->"Procedural Programming"],
  Cell[73978, 1811, 435, 17, 27, "Subitem",
   CellTags->"Procedural Programming"],
  Cell[74600, 1837, 218, 6, 32, "Text",
   CellTags->"Procedural Programming"],
  Cell[74821, 1845, 436, 13, 99, "Input",
   CellTags->"Procedural Programming"],
  Cell[75387, 1864, 176, 4, 32, "Text",
   CellTags->"Procedural Programming"],
  Cell[75566, 1870, 496, 14, 121, "Input",
   CellTags->"Procedural Programming"],
  Cell[76065, 1886, 235, 7, 32, "Text",
   CellTags->"Procedural Programming"],
  Cell[76325, 1897, 92, 2, 32, "Input",
   CellTags->"Procedural Programming"],
  Cell[76420, 1901, 108, 2, 32, "Output",
   CellTags->"Procedural Programming"],
  Cell[77033, 1923, 205, 5, 32, "Text",
   CellTags->"Procedural Programming"],
  Cell[77241, 1930, 757, 20, 143, "Input",
   CellTags->"Procedural Programming"],
  Cell[78023, 1954, 92, 2, 32, "Input",
   CellTags->"Procedural Programming"],
  Cell[78118, 1958, 279, 7, 23, "Print",
   CellTags->"Procedural Programming"],
  Cell[78870, 1987, 91, 2, 32, "Input",
   CellTags->"Procedural Programming"],
  Cell[78964, 1991, 110, 2, 32, "Output",
   CellTags->"Procedural Programming"],
  Cell[80434, 2045, 471, 14, 33, "Text",
   CellTags->"Procedural Programming"],
  Cell[81215, 2072, 284, 10, 33, "Text",
   CellTags->"Procedural Programming"],
  Cell[81502, 2084, 569, 16, 121, "Input",
   CellTags->"Procedural Programming"],
  Cell[82074, 2102, 205, 7, 32, "Text",
   CellTags->"Procedural Programming"],
  Cell[82304, 2113, 159, 3, 32, "Input",
   CellTags->"Procedural Programming"],
  Cell[82466, 2118, 111, 2, 32, "Output",
   CellTags->"Procedural Programming"],
  Cell[82614, 2125, 158, 3, 32, "Input",
   CellTags->"Procedural Programming"],
  Cell[82775, 2130, 110, 2, 32, "Output",
   CellTags->"Procedural Programming"],
  Cell[82900, 2135, 182, 3, 32, InheritFromParent,
   CellTags->"Procedural Programming"],
  Cell[83085, 2140, 129, 2, 32, InheritFromParent,
   CellTags->"Procedural Programming"],
  Cell[83239, 2146, 69, 1, 32, "Input",
   CellTags->"Procedural Programming"],
  Cell[83311, 2149, 109, 2, 32, "Output",
   CellTags->"Procedural Programming"],
  Cell[83435, 2154, 178, 6, 32, "Text",
   CellTags->"Procedural Programming"],
  Cell[83616, 2162, 189, 4, 32, "Input",
   CellTags->"Procedural Programming"],
  Cell[129924, 3779, 757, 20, 143, "Input",
   CellTags->"Procedural Programming"]},
 "Functional Programming"->{
  Cell[84457, 2187, 188, 5, 32, "Input",
   CellTags->"Functional Programming"],
  Cell[84648, 2194, 618, 13, 53, "Text",
   CellTags->"Functional Programming"],
  Cell[85269, 2209, 307, 9, 58, "Input",
   CellTags->"Functional Programming"],
  Cell[85774, 2228, 191, 4, 32, "Input",
   CellTags->"Functional Programming"],
  Cell[85968, 2234, 113, 2, 32, "Output",
   CellTags->"Functional Programming"],
  Cell[86096, 2239, 131, 2, 32, InheritFromParent,
   CellTags->"Functional Programming"],
  Cell[86230, 2243, 88, 1, 31, "Text",
   CellTags->"Functional Programming"],
  Cell[86321, 2246, 173, 4, 32, "Input",
   CellTags->"Functional Programming"],
  Cell[86497, 2252, 146, 2, 31, "Text",
   CellTags->"Functional Programming"],
  Cell[86646, 2256, 208, 5, 32, "Input",
   CellTags->"Functional Programming"],
  Cell[86857, 2263, 317, 10, 33, "Text",
   CellTags->"Functional Programming"],
  Cell[87199, 2277, 348, 8, 55, "Input",
   CellTags->"Functional Programming"],
  Cell[87550, 2287, 302, 8, 32, "Output",
   CellTags->"Functional Programming"],
  Cell[87867, 2298, 321, 9, 33, "Text",
   CellTags->"Functional Programming"],
  Cell[88213, 2311, 203, 4, 32, "Input",
   CellTags->"Functional Programming"],
  Cell[88419, 2317, 125, 2, 32, "Output",
   CellTags->"Functional Programming"],
  Cell[88559, 2322, 132, 2, 31, "Text",
   CellTags->"Functional Programming"],
  Cell[88716, 2328, 205, 4, 32, "Input",
   CellTags->"Functional Programming"],
  Cell[88924, 2334, 226, 6, 32, "Output",
   CellTags->"Functional Programming"],
  Cell[89165, 2343, 151, 2, 31, "Text",
   CellTags->"Functional Programming"],
  Cell[89341, 2349, 182, 4, 32, "Input",
   CellTags->"Functional Programming"],
  Cell[89526, 2355, 492, 10, 32, "Output",
   CellTags->"Functional Programming"],
  Cell[94160, 2516, 323, 9, 33, "Text",
   CellTags->"Functional Programming"],
  Cell[94508, 2529, 245, 6, 32, "Input",
   CellTags->"Functional Programming"],
  Cell[94756, 2537, 292, 10, 32, "Output",
   CellTags->"Functional Programming"],
  Cell[95085, 2552, 292, 7, 32, "Input",
   CellTags->"Functional Programming"],
  Cell[95380, 2561, 339, 11, 32, "Output",
   CellTags->"Functional Programming"],
  Cell[95756, 2577, 201, 5, 32, "Input",
   CellTags->"Functional Programming"],
  Cell[95960, 2584, 302, 10, 32, "Output",
   CellTags->"Functional Programming"],
  Cell[96277, 2597, 526, 14, 53, "Text",
   CellTags->"Functional Programming"],
  Cell[97139, 2627, 467, 17, 53, "Text",
   CellTags->"Functional Programming"],
  Cell[97609, 2646, 443, 14, 33, "Text",
   CellTags->"Functional Programming"],
  Cell[98077, 2664, 152, 4, 32, "Input",
   CellTags->"Functional Programming"],
  Cell[98232, 2670, 107, 2, 32, "Output",
   CellTags->"Functional Programming"],
  Cell[98376, 2677, 154, 4, 32, "Input",
   CellTags->"Functional Programming"],
  Cell[98533, 2683, 107, 2, 32, "Output",
   CellTags->"Functional Programming"],
  Cell[99095, 2709, 157, 2, 32, "Text",
   CellTags->"Functional Programming"],
  Cell[99277, 2715, 342, 11, 32, "Input",
   CellTags->"Functional Programming"],
  Cell[99622, 2728, 309, 10, 32, "Output",
   CellTags->"Functional Programming"],
  Cell[99946, 2741, 361, 15, 33, "Text",
   CellTags->"Functional Programming"],
  Cell[100332, 2760, 144, 3, 32, "Input",
   CellTags->"Functional Programming"],
  Cell[100479, 2765, 478, 16, 46, "Output",
   CellTags->"Functional Programming"],
  Cell[100994, 2786, 100, 2, 32, "Input",
   CellTags->"Functional Programming"],
  Cell[101097, 2790, 8004, 219, 284, "Output",
   CellTags->"Functional Programming"],
  Cell[109138, 3014, 96, 2, 32, "Input",
   CellTags->"Functional Programming"],
  Cell[109237, 3018, 112, 2, 32, "Output",
   CellTags->"Functional Programming"],
  Cell[109364, 3023, 169, 5, 32, "Text",
   CellTags->"Functional Programming"],
  Cell[109558, 3032, 98, 2, 32, "Input",
   CellTags->"Functional Programming"],
  Cell[109659, 3036, 105, 2, 32, "Output",
   CellTags->"Functional Programming"],
  Cell[111206, 3088, 276, 12, 32, "Text",
   CellTags->"Functional Programming"],
  Cell[111898, 3116, 271, 9, 33, "Text",
   CellTags->"Functional Programming"],
  Cell[112194, 3129, 248, 6, 32, "Input",
   CellTags->"Functional Programming"],
  Cell[112445, 3137, 167, 4, 32, "Output",
   CellTags->"Functional Programming"],
  Cell[112649, 3146, 249, 6, 32, "Input",
   CellTags->"Functional Programming"],
  Cell[112901, 3154, 139, 3, 32, "Output",
   CellTags->"Functional Programming"],
  Cell[113055, 3160, 149, 2, 32, "Text",
   CellTags->"Functional Programming"],
  Cell[113229, 3166, 263, 7, 32, "Input",
   CellTags->"Functional Programming"],
  Cell[113495, 3175, 115, 2, 32, "Output",
   CellTags->"Functional Programming"]},
 "Programming with Rules"->{
  Cell[117877, 3329, 280, 5, 32, "Text",
   CellTags->"Programming with Rules"],
  Cell[118182, 3338, 86, 2, 32, "Input",
   CellTags->"Programming with Rules"],
  Cell[118271, 3342, 107, 2, 32, "Output",
   CellTags->"Programming with Rules"],
  Cell[118415, 3349, 198, 5, 34, "Input",
   CellTags->"Programming with Rules"],
  Cell[118616, 3356, 151, 4, 32, "Output",
   CellTags->"Programming with Rules"],
  Cell[118782, 3363, 546, 18, 53, "Text",
   CellTags->"Programming with Rules"],
  Cell[119331, 3383, 438, 14, 33, "Text",
   CellTags->"Programming with Rules"],
  Cell[119772, 3399, 95, 2, 32, "Input",
   CellTags->"Programming with Rules"],
  Cell[119892, 3405, 343, 9, 37, "Input",
   CellTags->"Programming with Rules"],
  Cell[120238, 3416, 177, 4, 32, "Output",
   CellTags->"Programming with Rules"],
  Cell[120837, 3441, 282, 10, 33, "Text",
   CellTags->"Programming with Rules"],
  Cell[121144, 3455, 254, 7, 34, "Input",
   CellTags->"Programming with Rules"],
  Cell[121401, 3464, 153, 4, 32, "Output",
   CellTags->"Programming with Rules"],
  Cell[121816, 3481, 212, 6, 32, "Text",
   CellTags->"Programming with Rules"],
  Cell[122053, 3491, 81, 2, 32, "Input",
   CellTags->"Programming with Rules"],
  Cell[122137, 3495, 168, 3, 42, "Print",
   CellTags->{
    "Info-9f33aa72-2fa6-44cc-9079-2198bdfe6c00", "Programming with Rules"}],
  Cell[122320, 3501, 158, 2, 32, "Text",
   CellTags->"Programming with Rules"],
  Cell[122503, 3507, 308, 6, 32, "Input",
   CellTags->"Programming with Rules"],
  Cell[122814, 3515, 151, 2, 32, "Output",
   CellTags->"Programming with Rules"],
  Cell[123106, 3525, 311, 7, 32, "Text",
   CellTags->"Programming with Rules"],
  Cell[124365, 3564, 201, 8, 30, "Item",
   CellTags->"Programming with Rules"],
  Cell[124591, 3576, 318, 9, 32, "Input",
   CellTags->"Programming with Rules"],
  Cell[124912, 3587, 296, 8, 32, "Output",
   CellTags->"Programming with Rules"],
  Cell[125245, 3600, 245, 7, 30, "Item",
   CellTags->"Programming with Rules"],
  Cell[125493, 3609, 110, 2, 30, "Item",
   CellTags->"Programming with Rules"],
  Cell[125640, 3616, 324, 10, 32, "Input",
   CellTags->"Programming with Rules"],
  Cell[125967, 3628, 132, 3, 32, "Output",
   CellTags->"Programming with Rules"],
  Cell[126136, 3636, 393, 11, 32, "Input",
   CellTags->"Programming with Rules"],
  Cell[126532, 3649, 133, 3, 32, "Output",
   CellTags->"Programming with Rules"],
  Cell[126968, 3666, 607, 21, 50, "Item",
   CellTags->"Programming with Rules"],
  Cell[127600, 3691, 381, 11, 32, "Input",
   CellTags->"Programming with Rules"],
  Cell[127984, 3704, 147, 4, 32, "Output",
   CellTags->"Programming with Rules"],
  Cell[128274, 3716, 349, 10, 32, "Input",
   CellTags->"Programming with Rules"],
  Cell[128626, 3728, 147, 4, 32, "Output",
   CellTags->"Programming with Rules"],
  Cell[128788, 3735, 221, 7, 30, "Item",
   CellTags->"Programming with Rules"],
  Cell[129034, 3746, 369, 11, 32, "Input",
   CellTags->"Programming with Rules"],
  Cell[129406, 3759, 176, 5, 32, "Output",
   CellTags->"Programming with Rules"],
  Cell[134358, 3927, 335, 9, 32, "Input",
   CellTags->"Programming with Rules"],
  Cell[134696, 3938, 181, 5, 32, "Output",
   CellTags->"Programming with Rules"],
  Cell[135050, 3952, 323, 9, 32, "Input",
   CellTags->"Programming with Rules"],
  Cell[135376, 3963, 221, 6, 32, "Output",
   CellTags->"Programming with Rules"],
  Cell[135612, 3972, 130, 2, 32, InheritFromParent,
   CellTags->"Programming with Rules"],
  Cell[135745, 3976, 131, 2, 32, InheritFromParent,
   CellTags->"Programming with Rules"],
  Cell[136012, 3983, 329, 9, 32, "Input",
   CellTags->"Programming with Rules"],
  Cell[136462, 3997, 347, 10, 32, "Input",
   CellTags->"Programming with Rules"],
  Cell[137019, 4015, 576, 18, 32, "Input",
   CellTags->"Programming with Rules"],
  Cell[137598, 4035, 366, 12, 32, "Output",
   CellTags->"Programming with Rules"]},
 "Info-9f33aa72-2fa6-44cc-9079-2198bdfe6c00"->{
  Cell[122137, 3495, 168, 3, 42, "Print",
   CellTags->{
    "Info-9f33aa72-2fa6-44cc-9079-2198bdfe6c00", "Programming with Rules"}]},
 "Info-ed33d541-ec8b-4ad4-91d4-a90cda982af2"->{
  Cell[131723, 3835, 137, 2, 42, "Print",
   CellTags->"Info-ed33d541-ec8b-4ad4-91d4-a90cda982af2"],
  Cell[131863, 3839, 1271, 35, 23, "Print",
   CellTags->"Info-ed33d541-ec8b-4ad4-91d4-a90cda982af2"]},
 "Comparing Programming Styles"->{
  Cell[138805, 4076, 536, 16, 32, "Input",
   CellTags->"Comparing Programming Styles"],
  Cell[139469, 4099, 796, 25, 99, "Input",
   CellTags->"Comparing Programming Styles"],
  Cell[140268, 4126, 220, 5, 32, "Output",
   CellTags->"Comparing Programming Styles"],
  Cell[140503, 4134, 308, 9, 31, "Item",
   CellTags->"Comparing Programming Styles"],
  Cell[140836, 4147, 411, 13, 32, "Input",
   CellTags->"Comparing Programming Styles"],
  Cell[141250, 4162, 222, 5, 32, "Output",
   CellTags->"Comparing Programming Styles"],
  Cell[141487, 4170, 197, 3, 30, "Item",
   CellTags->"Comparing Programming Styles"],
  Cell[141709, 4177, 130, 3, 32, "Input",
   CellTags->"Comparing Programming Styles"],
  Cell[141842, 4182, 198, 5, 32, "Output",
   CellTags->"Comparing Programming Styles"],
  Cell[142077, 4192, 141, 3, 32, "Input",
   CellTags->"Comparing Programming Styles"],
  Cell[142221, 4197, 197, 5, 32, "Output",
   CellTags->"Comparing Programming Styles"],
  Cell[142433, 4205, 195, 3, 30, "Item",
   CellTags->"Comparing Programming Styles"],
  Cell[142653, 4212, 269, 7, 32, "Input",
   CellTags->"Comparing Programming Styles"],
  Cell[142925, 4221, 198, 5, 32, "Output",
   CellTags->"Comparing Programming Styles"]},
 "Exercises"->{
  Cell[144679, 4283, 744, 21, 143, "Input",
   CellTags->{"Exercises", "Programming Style"}],
  Cell[145426, 4306, 447, 14, 32, "Output",
   CellTags->{"Exercises", "Programming Style"}],
  Cell[153321, 4576, 167, 2, 42, "Subsection",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[153491, 4580, 318, 7, 53, "Text",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[153812, 4589, 1261, 34, 209, "Input",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[155076, 4625, 432, 10, 50, "Item",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[155533, 4639, 249, 9, 97, "Input",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[155785, 4650, 283, 8, 32, "Output",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[156083, 4661, 244, 8, 30, "Item",
   CellTags->{"Exercises", "Debugging a Program"}]},
 "Programming Style"->{
  Cell[144679, 4283, 744, 21, 143, "Input",
   CellTags->{"Exercises", "Programming Style"}],
  Cell[145426, 4306, 447, 14, 32, "Output",
   CellTags->{"Exercises", "Programming Style"}]},
 "Debugging a Program"->{
  Cell[153321, 4576, 167, 2, 42, "Subsection",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[153491, 4580, 318, 7, 53, "Text",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[153812, 4589, 1261, 34, 209, "Input",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[155076, 4625, 432, 10, 50, "Item",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[155533, 4639, 249, 9, 97, "Input",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[155785, 4650, 283, 8, 32, "Output",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[156083, 4661, 244, 8, 30, "Item",
   CellTags->{"Exercises", "Debugging a Program"}]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Procedural Programming", 164466, 4878},
 {"Functional Programming", 168007, 4965},
 {"Programming with Rules", 172779, 5082},
 {"Info-9f33aa72-2fa6-44cc-9079-2198bdfe6c00", 176765, 5178},
 {"Info-ed33d541-ec8b-4ad4-91d4-a90cda982af2", 176948, 5182},
 {"Comparing Programming Styles", 177188, 5187},
 {"Exercises", 178442, 5216},
 {"Programming Style", 179320, 5235},
 {"Debugging a Program", 179535, 5240}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 369, 8, 82, "Title"],
Cell[951, 32, 311, 4, 46, "Subtitle"],
Cell[1265, 38, 373, 5, 24, "Subsubtitle"],
Cell[1641, 45, 502, 9, 57, "Subsubtitle"],
Cell[2146, 56, 507, 7, 25, "Subsubtitle"],
Cell[CellGroupData[{
Cell[2678, 67, 208, 3, 59, "Section"],
Cell[2889, 72, 511, 12, 49, "Text"],
Cell[3403, 86, 345, 8, 49, "Text"],
Cell[3751, 96, 220, 4, 30, "Text"],
Cell[CellGroupData[{
Cell[3996, 104, 102, 1, 39, "Subsection"],
Cell[4101, 107, 345, 8, 49, "Text"],
Cell[4449, 117, 277, 8, 30, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[4763, 130, 97, 1, 31, "Subsection"],
Cell[4863, 133, 245, 5, 30, "Text"],
Cell[5111, 140, 359, 6, 30, "Text"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[5519, 152, 148, 2, 45, "Section"],
Cell[CellGroupData[{
Cell[5692, 158, 153, 2, 42, "Subsection"],
Cell[5848, 162, 558, 15, 49, "Text"],
Cell[6409, 179, 11293, 191, 90, "Text"],
Cell[17705, 372, 421, 12, 49, "Text"],
Cell[18129, 386, 444, 9, 49, "Text"],
Cell[18576, 397, 17511, 293, 90, "Text"],
Cell[CellGroupData[{
Cell[36112, 694, 270, 7, 29, "Subsubsection"],
Cell[36385, 703, 203, 5, 47, "Note"],
Cell[36591, 710, 415, 8, 49, "Text"],
Cell[37009, 720, 116, 2, 28, "Input"],
Cell[37128, 724, 113, 2, 28, "Input"],
Cell[37244, 728, 116, 2, 28, "Input"],
Cell[37363, 732, 119, 2, 28, "Input"],
Cell[37485, 736, 119, 2, 28, "Input"],
Cell[37607, 740, 121, 2, 28, "Input"],
Cell[37731, 744, 398, 8, 49, "Text"],
Cell[38132, 754, 115, 2, 28, "Input"],
Cell[38250, 758, 117, 2, 28, "Input"],
Cell[38370, 762, 115, 2, 28, "Input"],
Cell[38488, 766, 112, 2, 28, "Input"],
Cell[38603, 770, 558, 12, 68, "Text"],
Cell[39164, 784, 151, 5, 28, "Input",
 CellID->644985825],
Cell[39318, 791, 195, 4, 28, "Input"],
Cell[39516, 797, 145, 3, 28, "Input"],
Cell[39664, 802, 126, 2, 28, "Input"],
Cell[39793, 806, 346, 7, 63, "Note"],
Cell[40142, 815, 115, 2, 28, "Input"],
Cell[40260, 819, 150, 3, 28, "Input"],
Cell[40413, 824, 147, 3, 28, "Input"],
Cell[40563, 829, 154, 3, 28, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[40754, 837, 313, 7, 23, "Subsubsection"],
Cell[41070, 846, 383, 9, 49, "Text"],
Cell[41456, 857, 113, 1, 30, "Text"],
Cell[41572, 860, 153, 3, 28, "Input"],
Cell[41728, 865, 127, 1, 47, "Note"],
Cell[41858, 868, 186, 4, 28, "Input"],
Cell[42047, 874, 222, 6, 30, "Text"],
Cell[42272, 882, 260, 7, 28, "Input"],
Cell[42535, 891, 176, 4, 47, "Note"],
Cell[42714, 897, 235, 6, 28, "Input"],
Cell[42952, 905, 313, 5, 63, "Note"],
Cell[43268, 912, 230, 6, 28, "Input"],
Cell[43501, 920, 240, 6, 28, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[43790, 932, 203, 3, 34, "Subsection"],
Cell[43996, 937, 308, 8, 32, "Text"],
Cell[CellGroupData[{
Cell[44329, 949, 173, 2, 32, "Subsubsection"],
Cell[44505, 953, 162, 2, 30, "Text"],
Cell[44670, 957, 116, 2, 28, "Input"],
Cell[44789, 961, 117, 2, 28, "Input"],
Cell[44909, 965, 117, 2, 28, "Input"],
Cell[45029, 969, 115, 2, 28, "Input"],
Cell[45147, 973, 94, 1, 28, "Input"],
Cell[45244, 976, 316, 6, 63, "Note"],
Cell[45563, 984, 140, 1, 30, "Text"],
Cell[45706, 987, 112, 2, 28, "Input"],
Cell[45821, 991, 380, 8, 63, "Note"],
Cell[46204, 1001, 162, 3, 30, "Text"],
Cell[46369, 1006, 126, 2, 28, "Input"],
Cell[46498, 1010, 202, 5, 30, "Text"],
Cell[46703, 1017, 71, 1, 28, "Input"],
Cell[46777, 1020, 110, 2, 28, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[46924, 1027, 231, 3, 26, "Subsubsection"],
Cell[47158, 1032, 287, 5, 49, "Text"],
Cell[47448, 1039, 119, 2, 28, "Input"],
Cell[47570, 1043, 115, 2, 28, "Input"],
Cell[47688, 1047, 119, 2, 28, "Input"],
Cell[47810, 1051, 232, 4, 63, "Note"],
Cell[48045, 1057, 139, 1, 30, "Text"],
Cell[48187, 1060, 144, 3, 28, "Input"],
Cell[48334, 1065, 137, 3, 28, "Input"],
Cell[48474, 1070, 119, 2, 28, "Input"],
Cell[48596, 1074, 147, 3, 28, "Input"],
Cell[48746, 1079, 339, 8, 49, "Text"],
Cell[49088, 1089, 228, 5, 30, "Text"],
Cell[49319, 1096, 5133, 91, 98, "Note"],
Cell[54455, 1189, 170, 3, 28, "Input"],
Cell[54628, 1194, 129, 1, 30, "Text"],
Cell[54760, 1197, 161, 3, 28, "Input"],
Cell[54924, 1202, 160, 3, 30, "Text"],
Cell[55087, 1207, 130, 2, 28, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[55254, 1214, 329, 4, 26, "Subsubsection"],
Cell[55586, 1220, 209, 4, 30, "Text"],
Cell[55798, 1226, 163, 3, 47, "Note"],
Cell[55964, 1231, 384, 9, 63, "Input"],
Cell[56351, 1242, 156, 3, 28, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[56544, 1250, 273, 3, 26, "Subsubsection"],
Cell[56820, 1255, 194, 4, 30, "Text"],
Cell[57017, 1261, 218, 5, 28, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[57272, 1271, 323, 4, 26, "Subsubsection"],
Cell[57598, 1277, 230, 6, 32, "Text"],
Cell[57831, 1285, 248, 7, 32, "Input"],
Cell[58082, 1294, 213, 4, 47, "Note"],
Cell[58298, 1300, 123, 2, 32, "Input"],
Cell[58424, 1304, 129, 2, 32, "Input"],
Cell[58556, 1308, 109, 2, 32, "Input"],
Cell[58668, 1312, 124, 2, 32, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[58829, 1319, 374, 5, 26, "Subsubsection"],
Cell[59206, 1326, 270, 6, 32, "Text"],
Cell[59479, 1334, 190, 4, 32, "Input"],
Cell[59672, 1340, 151, 3, 32, "Input"],
Cell[59826, 1345, 158, 3, 32, "Text"],
Cell[59987, 1350, 168, 4, 32, "Input"],
Cell[60158, 1356, 115, 1, 31, "Text"],
Cell[60276, 1359, 283, 7, 32, "Input"],
Cell[60562, 1368, 224, 5, 32, "Input"],
Cell[60789, 1375, 151, 3, 32, "Input"],
Cell[60943, 1380, 114, 1, 31, "Text"],
Cell[61060, 1383, 147, 3, 32, "Input"],
Cell[61210, 1388, 203, 5, 32, "Input"],
Cell[61416, 1395, 173, 4, 32, "Input"],
Cell[61592, 1401, 184, 4, 32, "Input"],
Cell[61779, 1407, 127, 2, 32, "Input"],
Cell[61909, 1411, 340, 8, 47, "Note"]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[62310, 1426, 98, 1, 45, "Section"],
Cell[CellGroupData[{
Cell[62433, 1431, 164, 2, 42, "Subsection"],
Cell[62600, 1435, 164, 2, 30, "Text"],
Cell[62767, 1439, 498, 14, 49, "Text"],
Cell[63268, 1455, 126, 2, 28, "Input"],
Cell[63397, 1459, 216, 5, 28, "Input"],
Cell[63616, 1466, 328, 10, 35, "Text"],
Cell[63947, 1478, 169, 3, 28, "Input"],
Cell[64119, 1483, 406, 11, 49, "Text"],
Cell[64528, 1496, 160, 3, 28, "Input"],
Cell[64691, 1501, 172, 3, 28, "Input"],
Cell[64866, 1506, 302, 9, 30, "Text"],
Cell[65171, 1517, 117, 2, 28, "Input"],
Cell[65291, 1521, 172, 3, 28, "Input"],
Cell[65466, 1526, 367, 12, 49, "Text"],
Cell[65836, 1540, 168, 4, 28, "Input"],
Cell[66007, 1546, 110, 2, 28, "Input"],
Cell[66120, 1550, 122, 2, 28, "Input"],
Cell[66245, 1554, 120, 2, 28, "Input"],
Cell[66368, 1558, 538, 10, 87, "Text"],
Cell[66909, 1570, 169, 4, 28, "Input"],
Cell[67081, 1576, 108, 2, 28, "Input"],
Cell[67192, 1580, 405, 7, 49, "Text"],
Cell[67600, 1589, 170, 4, 28, "Input"],
Cell[67773, 1595, 112, 2, 28, "Input"],
Cell[67888, 1599, 122, 2, 28, "Input"],
Cell[68013, 1603, 123, 2, 28, "Input"],
Cell[68139, 1607, 122, 2, 28, "Input"],
Cell[68264, 1611, 240, 5, 28, "Input"],
Cell[68507, 1618, 173, 2, 30, "Text"],
Cell[68683, 1622, 277, 7, 46, "Input"],
Cell[68963, 1631, 175, 4, 28, "Input"],
Cell[69141, 1637, 175, 4, 28, "Input"],
Cell[69319, 1643, 157, 3, 28, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[69513, 1651, 109, 1, 34, "Subsection"],
Cell[69625, 1654, 488, 8, 74, "Text",
 CellTags->"Procedural Programming"],
Cell[CellGroupData[{
Cell[70138, 1666, 304, 8, 77, "Input",
 CellTags->"Procedural Programming"],
Cell[70445, 1676, 408, 12, 32, "Output",
 CellTags->"Procedural Programming"]
}, Open  ]],
Cell[70868, 1691, 608, 20, 36, "Text",
 CellTags->"Procedural Programming"],
Cell[71479, 1713, 285, 8, 32, "Text",
 CellTags->"Procedural Programming"],
Cell[71767, 1723, 466, 12, 99, "Input",
 CellTags->"Procedural Programming"],
Cell[CellGroupData[{
Cell[72258, 1739, 91, 2, 32, "Input",
 CellTags->"Procedural Programming"],
Cell[72352, 1743, 288, 8, 23, "Print",
 CellTags->"Procedural Programming"]
}, Open  ]],
Cell[72655, 1754, 129, 3, 32, "Text",
 CellTags->"Procedural Programming"],
Cell[CellGroupData[{
Cell[72809, 1761, 179, 6, 30, "Item",
 CellTags->"Procedural Programming"],
Cell[72991, 1769, 239, 9, 27, "Subitem",
 CellTags->"Procedural Programming"],
Cell[73233, 1780, 59, 1, 30, "Item",
 CellTags->"Procedural Programming"],
Cell[73295, 1783, 567, 23, 27, "Subitem",
 CellTags->"Procedural Programming"],
Cell[73865, 1808, 110, 1, 30, "Item",
 CellTags->"Procedural Programming"],
Cell[73978, 1811, 435, 17, 27, "Subitem",
 CellTags->"Procedural Programming"]
}, Open  ]],
Cell[CellGroupData[{
Cell[74450, 1833, 147, 2, 32, "Subsubsection"],
Cell[74600, 1837, 218, 6, 32, "Text",
 CellTags->"Procedural Programming"],
Cell[74821, 1845, 436, 13, 99, "Input",
 CellTags->"Procedural Programming"],
Cell[75260, 1860, 124, 2, 32, "Input"],
Cell[75387, 1864, 176, 4, 32, "Text",
 CellTags->"Procedural Programming"],
Cell[75566, 1870, 496, 14, 121, "Input",
 CellTags->"Procedural Programming"],
Cell[76065, 1886, 235, 7, 32, "Text",
 CellTags->"Procedural Programming"],
Cell[CellGroupData[{
Cell[76325, 1897, 92, 2, 32, "Input",
 CellTags->"Procedural Programming"],
Cell[76420, 1901, 108, 2, 32, "Output",
 CellTags->"Procedural Programming"]
}, Open  ]],
Cell[76543, 1906, 239, 4, 32, "Text"],
Cell[CellGroupData[{
Cell[76807, 1914, 138, 3, 32, "Input"],
Cell[76948, 1919, 70, 1, 32, "Output"]
}, Open  ]],
Cell[77033, 1923, 205, 5, 32, "Text",
 CellTags->"Procedural Programming"],
Cell[77241, 1930, 757, 20, 143, "Input",
 CellTags->"Procedural Programming"],
Cell[CellGroupData[{
Cell[78023, 1954, 92, 2, 32, "Input",
 CellTags->"Procedural Programming"],
Cell[78118, 1958, 279, 7, 23, "Print",
 CellTags->"Procedural Programming"]
}, Open  ]],
Cell[CellGroupData[{
Cell[78434, 1970, 140, 3, 32, "Input"],
Cell[78577, 1975, 256, 7, 23, "Print"]
}, Open  ]],
Cell[CellGroupData[{
Cell[78870, 1987, 91, 2, 32, "Input",
 CellTags->"Procedural Programming"],
Cell[78964, 1991, 110, 2, 32, "Output",
 CellTags->"Procedural Programming"]
}, Open  ]],
Cell[79089, 1996, 399, 9, 53, "Text"],
Cell[CellGroupData[{
Cell[79513, 2009, 124, 2, 32, "Input"],
Cell[79640, 2013, 72, 1, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[79749, 2019, 120, 2, 32, "Input"],
Cell[79872, 2023, 71, 1, 32, "Output"]
}, Open  ]],
Cell[79958, 2027, 261, 7, 32, "Text"],
Cell[CellGroupData[{
Cell[80244, 2038, 99, 1, 32, "Input"],
Cell[80346, 2041, 73, 1, 32, "Output"]
}, Open  ]],
Cell[80434, 2045, 471, 14, 33, "Text",
 CellTags->"Procedural Programming"],
Cell[80908, 2061, 304, 9, 70, "DisplayFormula"],
Cell[81215, 2072, 284, 10, 33, "Text",
 CellTags->"Procedural Programming"],
Cell[81502, 2084, 569, 16, 121, "Input",
 CellTags->"Procedural Programming"],
Cell[82074, 2102, 205, 7, 32, "Text",
 CellTags->"Procedural Programming"],
Cell[CellGroupData[{
Cell[82304, 2113, 159, 3, 32, "Input",
 CellTags->"Procedural Programming"],
Cell[82466, 2118, 111, 2, 32, "Output",
 CellTags->"Procedural Programming"]
}, Open  ]],
Cell[CellGroupData[{
Cell[82614, 2125, 158, 3, 32, "Input",
 CellTags->"Procedural Programming"],
Cell[82775, 2130, 110, 2, 32, "Output",
 CellTags->"Procedural Programming"]
}, Open  ]],
Cell[82900, 2135, 182, 3, 32, InheritFromParent,
 CellTags->"Procedural Programming"],
Cell[83085, 2140, 129, 2, 32, InheritFromParent,
 CellTags->"Procedural Programming"],
Cell[CellGroupData[{
Cell[83239, 2146, 69, 1, 32, "Input",
 CellTags->"Procedural Programming"],
Cell[83311, 2149, 109, 2, 32, "Output",
 CellTags->"Procedural Programming"]
}, Open  ]],
Cell[83435, 2154, 178, 6, 32, "Text",
 CellTags->"Procedural Programming"],
Cell[83616, 2162, 189, 4, 32, "Input",
 CellTags->"Procedural Programming"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[83854, 2172, 159, 2, 42, "Subsection"],
Cell[84016, 2176, 203, 3, 32, "Text"],
Cell[84222, 2181, 232, 4, 32, "Text"],
Cell[84457, 2187, 188, 5, 32, "Input",
 CellTags->"Functional Programming"],
Cell[84648, 2194, 618, 13, 53, "Text",
 CellTags->"Functional Programming"],
Cell[85269, 2209, 307, 9, 58, "Input",
 CellTags->"Functional Programming"],
Cell[85579, 2220, 170, 4, 32, "Text"],
Cell[CellGroupData[{
Cell[85774, 2228, 191, 4, 32, "Input",
 CellTags->"Functional Programming"],
Cell[85968, 2234, 113, 2, 32, "Output",
 CellTags->"Functional Programming"]
}, Open  ]],
Cell[86096, 2239, 131, 2, 32, InheritFromParent,
 CellTags->"Functional Programming"],
Cell[86230, 2243, 88, 1, 31, "Text",
 CellTags->"Functional Programming"],
Cell[86321, 2246, 173, 4, 32, "Input",
 CellTags->"Functional Programming"],
Cell[86497, 2252, 146, 2, 31, "Text",
 CellTags->"Functional Programming"],
Cell[86646, 2256, 208, 5, 32, "Input",
 CellTags->"Functional Programming"],
Cell[86857, 2263, 317, 10, 33, "Text",
 CellTags->"Functional Programming"],
Cell[CellGroupData[{
Cell[87199, 2277, 348, 8, 55, "Input",
 CellTags->"Functional Programming"],
Cell[87550, 2287, 302, 8, 32, "Output",
 CellTags->"Functional Programming"]
}, Open  ]],
Cell[87867, 2298, 321, 9, 33, "Text",
 CellTags->"Functional Programming"],
Cell[CellGroupData[{
Cell[88213, 2311, 203, 4, 32, "Input",
 CellTags->"Functional Programming"],
Cell[88419, 2317, 125, 2, 32, "Output",
 CellTags->"Functional Programming"]
}, Open  ]],
Cell[88559, 2322, 132, 2, 31, "Text",
 CellTags->"Functional Programming"],
Cell[CellGroupData[{
Cell[88716, 2328, 205, 4, 32, "Input",
 CellTags->"Functional Programming"],
Cell[88924, 2334, 226, 6, 32, "Output",
 CellTags->"Functional Programming"]
}, Open  ]],
Cell[89165, 2343, 151, 2, 31, "Text",
 CellTags->"Functional Programming"],
Cell[CellGroupData[{
Cell[89341, 2349, 182, 4, 32, "Input",
 CellTags->"Functional Programming"],
Cell[89526, 2355, 492, 10, 32, "Output",
 CellTags->"Functional Programming"]
}, Open  ]],
Cell[CellGroupData[{
Cell[90055, 2370, 96, 1, 32, "Subsubsection"],
Cell[90154, 2373, 108, 1, 32, "Text"],
Cell[CellGroupData[{
Cell[90287, 2378, 203, 5, 32, "Input"],
Cell[90493, 2385, 212, 6, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[90742, 2396, 212, 5, 32, "Input"],
Cell[90957, 2403, 212, 6, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[91206, 2414, 209, 5, 32, "Input"],
Cell[91418, 2421, 217, 6, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[91672, 2432, 179, 4, 32, "Input"],
Cell[91854, 2438, 188, 5, 32, "Output"]
}, Open  ]],
Cell[92057, 2446, 139, 1, 32, "Text"],
Cell[92199, 2449, 346, 8, 32, "Input"],
Cell[92548, 2459, 272, 8, 32, "Input"],
Cell[CellGroupData[{
Cell[92845, 2471, 122, 2, 32, "Input"],
Cell[92970, 2475, 94, 1, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[93101, 2481, 124, 2, 32, "Input"],
Cell[93228, 2485, 99, 1, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[93364, 2491, 209, 4, 32, "Input"],
Cell[93576, 2497, 273, 5, 32, "Output"]
}, Open  ]],
Cell[93864, 2505, 154, 3, 32, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[94055, 2513, 102, 1, 32, "Subsubsection"],
Cell[94160, 2516, 323, 9, 33, "Text",
 CellTags->"Functional Programming"],
Cell[CellGroupData[{
Cell[94508, 2529, 245, 6, 32, "Input",
 CellTags->"Functional Programming"],
Cell[94756, 2537, 292, 10, 32, "Output",
 CellTags->"Functional Programming"]
}, Open  ]],
Cell[CellGroupData[{
Cell[95085, 2552, 292, 7, 32, "Input",
 CellTags->"Functional Programming"],
Cell[95380, 2561, 339, 11, 32, "Output",
 CellTags->"Functional Programming"]
}, Open  ]],
Cell[CellGroupData[{
Cell[95756, 2577, 201, 5, 32, "Input",
 CellTags->"Functional Programming"],
Cell[95960, 2584, 302, 10, 32, "Output",
 CellTags->"Functional Programming"]
}, Open  ]],
Cell[96277, 2597, 526, 14, 53, "Text",
 CellTags->"Functional Programming"],
Cell[96806, 2613, 330, 12, 25, "DisplayFormula"],
Cell[97139, 2627, 467, 17, 53, "Text",
 CellTags->"Functional Programming"],
Cell[97609, 2646, 443, 14, 33, "Text",
 CellTags->"Functional Programming"],
Cell[CellGroupData[{
Cell[98077, 2664, 152, 4, 32, "Input",
 CellTags->"Functional Programming"],
Cell[98232, 2670, 107, 2, 32, "Output",
 CellTags->"Functional Programming"]
}, Open  ]],
Cell[CellGroupData[{
Cell[98376, 2677, 154, 4, 32, "Input",
 CellTags->"Functional Programming"],
Cell[98533, 2683, 107, 2, 32, "Output",
 CellTags->"Functional Programming"]
}, Open  ]],
Cell[98655, 2688, 183, 7, 33, "Text"],
Cell[CellGroupData[{
Cell[98863, 2699, 144, 4, 32, "Input"],
Cell[99010, 2705, 70, 1, 32, "Output"]
}, Open  ]],
Cell[99095, 2709, 157, 2, 32, "Text",
 CellTags->"Functional Programming"],
Cell[CellGroupData[{
Cell[99277, 2715, 342, 11, 32, "Input",
 CellTags->"Functional Programming"],
Cell[99622, 2728, 309, 10, 32, "Output",
 CellTags->"Functional Programming"]
}, Open  ]],
Cell[99946, 2741, 361, 15, 33, "Text",
 CellTags->"Functional Programming"],
Cell[CellGroupData[{
Cell[100332, 2760, 144, 3, 32, "Input",
 CellTags->"Functional Programming"],
Cell[100479, 2765, 478, 16, 46, "Output",
 CellTags->"Functional Programming"]
}, Open  ]],
Cell[CellGroupData[{
Cell[100994, 2786, 100, 2, 32, "Input",
 CellTags->"Functional Programming"],
Cell[101097, 2790, 8004, 219, 284, "Output",
 CellTags->"Functional Programming"]
}, Open  ]],
Cell[CellGroupData[{
Cell[109138, 3014, 96, 2, 32, "Input",
 CellTags->"Functional Programming"],
Cell[109237, 3018, 112, 2, 32, "Output",
 CellTags->"Functional Programming"]
}, Open  ]],
Cell[109364, 3023, 169, 5, 32, "Text",
 CellTags->"Functional Programming"],
Cell[CellGroupData[{
Cell[109558, 3032, 98, 2, 32, "Input",
 CellTags->"Functional Programming"],
Cell[109659, 3036, 105, 2, 32, "Output",
 CellTags->"Functional Programming"]
}, Open  ]],
Cell[109779, 3041, 119, 1, 32, "Text"],
Cell[109901, 3044, 82, 2, 32, "Input"],
Cell[109986, 3048, 107, 1, 32, "Text"],
Cell[110096, 3051, 333, 9, 34, "Input"],
Cell[110432, 3062, 179, 3, 32, "Input"],
Cell[110614, 3067, 145, 3, 32, "Input"],
Cell[110762, 3072, 151, 3, 32, "Input"],
Cell[110916, 3077, 152, 3, 32, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[111105, 3085, 98, 1, 32, "Subsubsection"],
Cell[111206, 3088, 276, 12, 32, "Text",
 CellTags->"Functional Programming"],
Cell[111485, 3102, 410, 12, 33, "Text"],
Cell[111898, 3116, 271, 9, 33, "Text",
 CellTags->"Functional Programming"],
Cell[CellGroupData[{
Cell[112194, 3129, 248, 6, 32, "Input",
 CellTags->"Functional Programming"],
Cell[112445, 3137, 167, 4, 32, "Output",
 CellTags->"Functional Programming"]
}, Open  ]],
Cell[CellGroupData[{
Cell[112649, 3146, 249, 6, 32, "Input",
 CellTags->"Functional Programming"],
Cell[112901, 3154, 139, 3, 32, "Output",
 CellTags->"Functional Programming"]
}, Open  ]],
Cell[113055, 3160, 149, 2, 32, "Text",
 CellTags->"Functional Programming"],
Cell[CellGroupData[{
Cell[113229, 3166, 263, 7, 32, "Input",
 CellTags->"Functional Programming"],
Cell[113495, 3175, 115, 2, 32, "Output",
 CellTags->"Functional Programming"]
}, Open  ]],
Cell[CellGroupData[{
Cell[113647, 3182, 185, 4, 32, "Input"],
Cell[113835, 3188, 78, 1, 32, "Output"]
}, Open  ]],
Cell[113928, 3192, 141, 1, 32, "Text"],
Cell[CellGroupData[{
Cell[114094, 3197, 235, 5, 32, "Input"],
Cell[114332, 3204, 71, 1, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[114440, 3210, 91, 2, 32, "Input"],
Cell[114534, 3214, 73, 1, 32, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[114656, 3221, 98, 1, 32, "Subsubsection"],
Cell[114757, 3224, 138, 1, 32, "Text"],
Cell[114898, 3227, 432, 12, 32, "Input"],
Cell[CellGroupData[{
Cell[115355, 3243, 133, 2, 32, "Input"],
Cell[115491, 3247, 659, 19, 77, "Output"]
}, Open  ]],
Cell[116165, 3269, 154, 2, 32, "Text"],
Cell[CellGroupData[{
Cell[116344, 3275, 626, 17, 143, "Input"],
Cell[116973, 3294, 125, 3, 32, "Output"]
}, Open  ]],
Cell[117113, 3300, 102, 1, 32, "Text"],
Cell[CellGroupData[{
Cell[117240, 3305, 177, 4, 32, "Input"],
Cell[117420, 3311, 125, 3, 32, "Output"]
}, Open  ]],
Cell[117560, 3317, 156, 3, 32, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[117765, 3326, 109, 1, 42, "Subsection"],
Cell[117877, 3329, 280, 5, 32, "Text",
 CellTags->"Programming with Rules"],
Cell[CellGroupData[{
Cell[118182, 3338, 86, 2, 32, "Input",
 CellTags->"Programming with Rules"],
Cell[118271, 3342, 107, 2, 32, "Output",
 CellTags->"Programming with Rules"]
}, Open  ]],
Cell[CellGroupData[{
Cell[118415, 3349, 198, 5, 34, "Input",
 CellTags->"Programming with Rules"],
Cell[118616, 3356, 151, 4, 32, "Output",
 CellTags->"Programming with Rules"]
}, Open  ]],
Cell[118782, 3363, 546, 18, 53, "Text",
 CellTags->"Programming with Rules"],
Cell[119331, 3383, 438, 14, 33, "Text",
 CellTags->"Programming with Rules"],
Cell[119772, 3399, 95, 2, 32, "Input",
 CellTags->"Programming with Rules"],
Cell[CellGroupData[{
Cell[119892, 3405, 343, 9, 37, "Input",
 CellTags->"Programming with Rules"],
Cell[120238, 3416, 177, 4, 32, "Output",
 CellTags->"Programming with Rules"]
}, Open  ]],
Cell[120430, 3423, 183, 7, 33, "Text"],
Cell[120616, 3432, 218, 7, 36, "Text"],
Cell[120837, 3441, 282, 10, 33, "Text",
 CellTags->"Programming with Rules"],
Cell[CellGroupData[{
Cell[121144, 3455, 254, 7, 34, "Input",
 CellTags->"Programming with Rules"],
Cell[121401, 3464, 153, 4, 32, "Output",
 CellTags->"Programming with Rules"]
}, Open  ]],
Cell[121569, 3471, 63, 0, 32, "Text"],
Cell[121635, 3473, 178, 6, 31, "Text"],
Cell[121816, 3481, 212, 6, 32, "Text",
 CellTags->"Programming with Rules"],
Cell[CellGroupData[{
Cell[122053, 3491, 81, 2, 32, "Input",
 CellTags->"Programming with Rules"],
Cell[122137, 3495, 168, 3, 42, "Print",
 CellTags->{
  "Info-9f33aa72-2fa6-44cc-9079-2198bdfe6c00", "Programming with Rules"}]
}, Open  ]],
Cell[122320, 3501, 158, 2, 32, "Text",
 CellTags->"Programming with Rules"],
Cell[CellGroupData[{
Cell[122503, 3507, 308, 6, 32, "Input",
 CellTags->"Programming with Rules"],
Cell[122814, 3515, 151, 2, 32, "Output",
 CellTags->"Programming with Rules"]
}, Open  ]],
Cell[CellGroupData[{
Cell[123002, 3522, 101, 1, 31, "Subsubsection"],
Cell[123106, 3525, 311, 7, 32, "Text",
 CellTags->"Programming with Rules"],
Cell[123420, 3534, 942, 28, 101, "Text"],
Cell[124365, 3564, 201, 8, 30, "Item",
 CellTags->"Programming with Rules"],
Cell[CellGroupData[{
Cell[124591, 3576, 318, 9, 32, "Input",
 CellTags->"Programming with Rules"],
Cell[124912, 3587, 296, 8, 32, "Output",
 CellTags->"Programming with Rules"]
}, Open  ]],
Cell[CellGroupData[{
Cell[125245, 3600, 245, 7, 30, "Item",
 CellTags->"Programming with Rules"],
Cell[125493, 3609, 110, 2, 30, "Item",
 CellTags->"Programming with Rules"]
}, Open  ]],
Cell[CellGroupData[{
Cell[125640, 3616, 324, 10, 32, "Input",
 CellTags->"Programming with Rules"],
Cell[125967, 3628, 132, 3, 32, "Output",
 CellTags->"Programming with Rules"]
}, Open  ]],
Cell[CellGroupData[{
Cell[126136, 3636, 393, 11, 32, "Input",
 CellTags->"Programming with Rules"],
Cell[126532, 3649, 133, 3, 32, "Output",
 CellTags->"Programming with Rules"]
}, Open  ]],
Cell[CellGroupData[{
Cell[126702, 3657, 152, 3, 32, "Input"],
Cell[126857, 3662, 96, 1, 32, "Output"]
}, Open  ]],
Cell[126968, 3666, 607, 21, 50, "Item",
 CellTags->"Programming with Rules"],
Cell[CellGroupData[{
Cell[127600, 3691, 381, 11, 32, "Input",
 CellTags->"Programming with Rules"],
Cell[127984, 3704, 147, 4, 32, "Output",
 CellTags->"Programming with Rules"]
}, Open  ]],
Cell[128146, 3711, 103, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[128274, 3716, 349, 10, 32, "Input",
 CellTags->"Programming with Rules"],
Cell[128626, 3728, 147, 4, 32, "Output",
 CellTags->"Programming with Rules"]
}, Open  ]],
Cell[128788, 3735, 221, 7, 30, "Item",
 CellTags->"Programming with Rules"],
Cell[CellGroupData[{
Cell[129034, 3746, 369, 11, 32, "Input",
 CellTags->"Programming with Rules"],
Cell[129406, 3759, 176, 5, 32, "Output",
 CellTags->"Programming with Rules"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[129631, 3770, 107, 1, 32, "Subsubsection"],
Cell[129741, 3773, 180, 4, 32, "Text"],
Cell[129924, 3779, 757, 20, 143, "Input",
 CellTags->"Procedural Programming"],
Cell[130684, 3801, 118, 1, 32, "Text"],
Cell[130805, 3804, 128, 2, 32, "Input"],
Cell[130936, 3808, 625, 17, 121, "Input"],
Cell[CellGroupData[{
Cell[131586, 3829, 112, 2, 32, "Input"],
Cell[CellGroupData[{
Cell[131723, 3835, 137, 2, 42, "Print",
 CellTags->"Info-ed33d541-ec8b-4ad4-91d4-a90cda982af2"],
Cell[131863, 3839, 1271, 35, 23, "Print",
 CellTags->"Info-ed33d541-ec8b-4ad4-91d4-a90cda982af2"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[133183, 3880, 140, 3, 32, "Input"],
Cell[133326, 3885, 115, 3, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[133478, 3893, 124, 2, 32, "Input"],
Cell[133605, 3897, 103, 2, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[133745, 3904, 123, 2, 32, "Input"],
Cell[133871, 3908, 71, 1, 32, "Output"]
}, Open  ]],
Cell[133957, 3912, 124, 2, 32, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[134118, 3919, 106, 1, 32, "Subsubsection"],
Cell[134227, 3922, 106, 1, 30, "Item"],
Cell[CellGroupData[{
Cell[134358, 3927, 335, 9, 32, "Input",
 CellTags->"Programming with Rules"],
Cell[134696, 3938, 181, 5, 32, "Output",
 CellTags->"Programming with Rules"]
}, Open  ]],
Cell[134892, 3946, 133, 2, 30, "Item"],
Cell[CellGroupData[{
Cell[135050, 3952, 323, 9, 32, "Input",
 CellTags->"Programming with Rules"],
Cell[135376, 3963, 221, 6, 32, "Output",
 CellTags->"Programming with Rules"]
}, Open  ]],
Cell[135612, 3972, 130, 2, 32, InheritFromParent,
 CellTags->"Programming with Rules"],
Cell[135745, 3976, 131, 2, 32, InheritFromParent,
 CellTags->"Programming with Rules"],
Cell[135879, 3980, 130, 1, 30, "Item"],
Cell[136012, 3983, 329, 9, 32, "Input",
 CellTags->"Programming with Rules"],
Cell[136344, 3994, 115, 1, 30, "Item"],
Cell[136462, 3997, 347, 10, 32, "Input",
 CellTags->"Programming with Rules"],
Cell[136812, 4009, 182, 2, 30, "Item"],
Cell[CellGroupData[{
Cell[137019, 4015, 576, 18, 32, "Input",
 CellTags->"Programming with Rules"],
Cell[137598, 4035, 366, 12, 32, "Output",
 CellTags->"Programming with Rules"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[138025, 4054, 116, 1, 42, "Subsection"],
Cell[138144, 4057, 305, 5, 53, "Text"],
Cell[CellGroupData[{
Cell[138474, 4066, 150, 2, 32, "Subsubsection"],
Cell[138627, 4070, 175, 4, 32, "Text"],
Cell[138805, 4076, 536, 16, 32, "Input",
 CellTags->"Comparing Programming Styles"],
Cell[139344, 4094, 100, 1, 30, "Item"],
Cell[CellGroupData[{
Cell[139469, 4099, 796, 25, 99, "Input",
 CellTags->"Comparing Programming Styles"],
Cell[140268, 4126, 220, 5, 32, "Output",
 CellTags->"Comparing Programming Styles"]
}, Open  ]],
Cell[140503, 4134, 308, 9, 31, "Item",
 CellTags->"Comparing Programming Styles"],
Cell[CellGroupData[{
Cell[140836, 4147, 411, 13, 32, "Input",
 CellTags->"Comparing Programming Styles"],
Cell[141250, 4162, 222, 5, 32, "Output",
 CellTags->"Comparing Programming Styles"]
}, Open  ]],
Cell[141487, 4170, 197, 3, 30, "Item",
 CellTags->"Comparing Programming Styles"],
Cell[CellGroupData[{
Cell[141709, 4177, 130, 3, 32, "Input",
 CellTags->"Comparing Programming Styles"],
Cell[141842, 4182, 198, 5, 32, "Output",
 CellTags->"Comparing Programming Styles"]
}, Open  ]],
Cell[CellGroupData[{
Cell[142077, 4192, 141, 3, 32, "Input",
 CellTags->"Comparing Programming Styles"],
Cell[142221, 4197, 197, 5, 32, "Output",
 CellTags->"Comparing Programming Styles"]
}, Open  ]],
Cell[142433, 4205, 195, 3, 30, "Item",
 CellTags->"Comparing Programming Styles"],
Cell[CellGroupData[{
Cell[142653, 4212, 269, 7, 32, "Input",
 CellTags->"Comparing Programming Styles"],
Cell[142925, 4221, 198, 5, 32, "Output",
 CellTags->"Comparing Programming Styles"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[143196, 4234, 145, 2, 59, "Section"],
Cell[CellGroupData[{
Cell[143366, 4240, 107, 1, 42, "Subsection"],
Cell[143476, 4243, 175, 4, 32, "Text"],
Cell[143654, 4249, 490, 15, 32, "Input"],
Cell[144147, 4266, 507, 13, 54, "Text"],
Cell[CellGroupData[{
Cell[144679, 4283, 744, 21, 143, "Input",
 CellTags->{"Exercises", "Programming Style"}],
Cell[145426, 4306, 447, 14, 32, "Output",
 CellTags->{"Exercises", "Programming Style"}]
}, Open  ]],
Cell[145888, 4323, 288, 3, 30, "Item"],
Cell[CellGroupData[{
Cell[146201, 4330, 157, 3, 32, "Input"],
Cell[146361, 4335, 400, 13, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[146798, 4353, 156, 3, 32, "Input"],
Cell[146957, 4358, 422, 13, 32, "Output"]
}, Open  ]],
Cell[147394, 4374, 189, 2, 30, "Item"],
Cell[CellGroupData[{
Cell[147608, 4380, 280, 7, 32, "Input"],
Cell[147891, 4389, 424, 13, 32, "Output"]
}, Open  ]],
Cell[148330, 4405, 594, 14, 49, "Item"],
Cell[CellGroupData[{
Cell[148949, 4423, 761, 21, 143, "Input"],
Cell[149713, 4446, 154, 4, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[149904, 4455, 157, 3, 32, "Input"],
Cell[150064, 4460, 152, 4, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[150253, 4469, 329, 8, 32, InheritFromParent],
Cell[150585, 4479, 202, 5, 32, "Output"]
}, Open  ]],
Cell[150802, 4487, 316, 8, 30, "Item"],
Cell[CellGroupData[{
Cell[151143, 4499, 788, 22, 165, "Input"],
Cell[151934, 4523, 275, 8, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[152246, 4536, 159, 3, 32, "Input"],
Cell[152408, 4541, 275, 8, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[152720, 4554, 248, 6, 32, "Input"],
Cell[152971, 4562, 301, 8, 32, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[153321, 4576, 167, 2, 42, "Subsection",
 CellTags->{"Exercises", "Debugging a Program"}],
Cell[153491, 4580, 318, 7, 53, "Text",
 CellTags->{"Exercises", "Debugging a Program"}],
Cell[153812, 4589, 1261, 34, 209, "Input",
 CellTags->{"Exercises", "Debugging a Program"}],
Cell[155076, 4625, 432, 10, 50, "Item",
 CellTags->{"Exercises", "Debugging a Program"}],
Cell[CellGroupData[{
Cell[155533, 4639, 249, 9, 97, "Input",
 CellTags->{"Exercises", "Debugging a Program"}],
Cell[155785, 4650, 283, 8, 32, "Output",
 CellTags->{"Exercises", "Debugging a Program"}]
}, Open  ]],
Cell[156083, 4661, 244, 8, 30, "Item",
 CellTags->{"Exercises", "Debugging a Program"}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
